Index: lib/Menu/Microfiles/PaymentSection/pay_on_delivery.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/Menu/Microfiles/PaymentSection/pay_on_delivery.dart b/lib/Menu/Microfiles/PaymentSection/pay_on_delivery.dart
--- a/lib/Menu/Microfiles/PaymentSection/pay_on_delivery.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/Menu/Microfiles/PaymentSection/pay_on_delivery.dart	(date 1651920287309)
@@ -55,12 +55,12 @@
                 title: Padding(
                   padding: const EdgeInsets.only(bottom: 5),
                   child: Text("Cash",style: TextStyle(fontWeight: FontWeight.w600,
-                  color: Colors.deepOrange),),
+                  color: widget.delType == 1?Colors.deepOrange:Colors.grey),),
                 ),
-                subtitle: Text(
+                subtitle: Text(widget.delType == 1?
                   "Pay cash at the time of delivery.We\n"
                   "reccomended you use online payments for"
-                  "\ncontacless delivery",
+                  "\ncontacless delivery":"Cash on delivery not available",
                   style: TextStyle(fontSize: 11,color: Colors.grey),
                 ),
                 leading: Container(
@@ -80,9 +80,11 @@
                value: _value,
                shape: CircleBorder(),
                onChanged: (bool? value) {
-                 setState(() {
-                   _value = value!;
-                 });
+                 if(widget.delType == 1){
+                   setState(() {
+                     _value = value!;
+                   });
+                 }
                },
              ),
 
Index: lib/screens/innerdetails/restaurantDetails.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/innerdetails/restaurantDetails.dart b/lib/screens/innerdetails/restaurantDetails.dart
--- a/lib/screens/innerdetails/restaurantDetails.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/innerdetails/restaurantDetails.dart	(date 1651936060479)
@@ -14,7 +14,7 @@
 import 'package:foodzer_customer_app/utils/helper.dart';
 import 'package:http/http.dart' as http;
 import 'dart:convert' as convert;
-
+import 'package:vertical_scrollable_tabview/vertical_scrollable_tabview.dart';
 import 'package:provider/provider.dart';
 
 import '../../Menu/Microfiles/ReviewSection/review.dart';
@@ -32,13 +32,14 @@
       _RestaurantDetailsScreenState();
 }
 
-class _RestaurantDetailsScreenState extends State<RestaurantDetailsScreen> {
+class _RestaurantDetailsScreenState extends State<RestaurantDetailsScreen> with TickerProviderStateMixin{
   bool isSwitched = false;
   bool isLoading = true;
   int? loadedItemCount;
   List<Category> categoryList = [];
   List<Item> filteredList = [];
   List<Item> filteredLoadedProductModelList = [];
+  TabController? tabController;
 
 
 
@@ -52,221 +53,230 @@
   @override
   Widget build(BuildContext context) {
     return Scaffold(
-        body: isLoading
-            ? Center(
-                child: CircularProgressIndicator(
-                color: Colors.deepOrangeAccent,
-              ))
-            : Consumer<ApplicationProvider>(
-                builder: (context, provider, child) {
-                return Stack(
-                  children: [
-                    CustomScrollView(
-                      shrinkWrap: true,
-                      slivers: [
-                        SliverAppBar(
-                          elevation: 0,
-                          expandedHeight: 150,
-                          backgroundColor: Colors.white,
-                          pinned: true,
-                          leading: Padding(
-                            padding:
-                                const EdgeInsets.only(left: 10.0, top: 10.0),
-                            child: Container(
-                              decoration: BoxDecoration(
-                                color: Colors.white,
-                                shape: BoxShape.circle,
-                              ),
-                              child: IconButton(
-                                onPressed: () {
-                                  Navigator.of(context).pop();
-                                },
-                                icon: Icon(
-                                  Icons.arrow_back,
-                                  color: Colors.black,
-                                  size: 30,
-                                ),
-                              ),
-                            ),
-                          ),
-                          actions: [
-                            Padding(
-                              padding:
-                                  const EdgeInsets.only(right: 10.0, top: 10.0),
-                              child: Container(
-                                decoration: BoxDecoration(
-                                  color: Colors.white,
-                                  shape: BoxShape.circle,
-                                ),
-                                child: IconButton(
-                                  onPressed: () {
-                                    Navigator.of(context).push(
-                                        MaterialPageRoute(
-                                            builder: (context) =>
-                                                SearchDetails()));
-                                  },
-                                  icon: Icon(
-                                    Icons.search,
-                                    color: Colors.black,
-                                    size: 30,
-                                  ),
-                                ),
-                              ),
-                            ),
-                          ],
-                          centerTitle: true,
-                          title: Text(
-                            provider.selectedRestModel.branchDetails!
-                                .merchantBranchName!,
-                            style: TextStyle(
-                                color: Colors.black,
-                                fontSize: 20,
-                                fontWeight: FontWeight.w600),
-                          ),
-                          flexibleSpace: FlexibleSpaceBar(
-                            collapseMode: CollapseMode.parallax,
-                            background: Image.network(
-                              provider.selectedRestModel.branchDetails!
+        body: SafeArea(
+          child: isLoading
+              ? Center(
+                  child: CircularProgressIndicator(
+                  color: Colors.deepOrangeAccent,
+                ))
+              : Consumer<ApplicationProvider>(
+                  builder: (context, provider, child) {
+                  return Stack(
+                    children: [
+                      CustomScrollView(
+                        shrinkWrap: true,
+                        physics: AlwaysScrollableScrollPhysics(),
+                        slivers: [
+                          SliverAppBar(
+                            elevation: 0,
+                            expandedHeight: 150,
+                            backgroundColor: Colors.white,
+                            pinned: true,
+                            leading: Padding(
+                              padding:
+                                  const EdgeInsets.only(left: 10.0, top: 10.0),
+                              child: Container(
+                                decoration: BoxDecoration(
+                                  color: Colors.white,
+                                  shape: BoxShape.circle,
+                                ),
+                                child: IconButton(
+                                  onPressed: () {
+                                    Navigator.of(context).pop();
+                                  },
+                                  icon: Icon(
+                                    Icons.arrow_back,
+                                    color: Colors.black,
+                                    size: 30,
+                                  ),
+                                ),
+                              ),
+                            ),
+                            actions: [
+                              Padding(
+                                padding:
+                                    const EdgeInsets.only(right: 10.0, top: 10.0),
+                                child: Container(
+                                  decoration: BoxDecoration(
+                                    color: Colors.white,
+                                    shape: BoxShape.circle,
+                                  ),
+                                  child: IconButton(
+                                    onPressed: () {
+                                      Navigator.of(context).push(
+                                          MaterialPageRoute(
+                                              builder: (context) =>
+                                                  SearchDetails()));
+                                    },
+                                    icon: Icon(
+                                      Icons.search,
+                                      color: Colors.black,
+                                      size: 30,
+                                    ),
+                                  ),
+                                ),
+                              ),
+                            ],
+                            centerTitle: true,
+                            title: Text(
+                              provider.selectedRestModel.branchDetails!
+                                  .merchantBranchName!,
+                              style: TextStyle(
+                                  color: Colors.black,
+                                  fontSize: 20,
+                                  fontWeight: FontWeight.w600),
+                            ),
+                            flexibleSpace: FlexibleSpaceBar(
+                              collapseMode: CollapseMode.parallax,
+                              background: Image.network( null!= provider.selectedRestModel.branchDetails!
+                                  .merchantBranchCoverImage?
+                                provider.selectedRestModel.branchDetails!
+                                    .merchantBranchCoverImage!
+                                  :     provider.selectedRestModel.branchDetails!
                                   .merchantBranchImage!,
-                              // _singleRestModel.branchDetails!.merchantBranchImage!,
-                              // 'https://cdn-prod.medicalnewstoday.com/content/images/articles/314/314819/delicious-buffet-foods.jpg',
-                              fit: BoxFit.cover,
-                            ),
-                          ),
-                        ),
-                        SliverList(
-                            delegate: SliverChildListDelegate([
-                          SingleChildScrollView(
-                            child: Padding(
-                              padding: const EdgeInsets.only(
-                                  left: 20.0,
-                                  right: 20.0,
-                                  bottom: 10,
-                                  top: 20.0),
-                              child: Column(
-                                crossAxisAlignment: CrossAxisAlignment.start,
-                                children: [
-                                  Row(
-                                    mainAxisAlignment:
-                                        MainAxisAlignment.spaceBetween,
-                                    children: [
-                                      Text(
-                                          // Provider.of<ApplicationProvider>(context ,listen: false).selectedRestModel.branchDetails!.merchantBranchName!,
-                                          provider
-                                              .selectedRestModel
-                                              .branchDetails!
-                                              .merchantBranchName!,
-                                          style: TextStyle(
-                                              fontSize: 20,
-                                              fontWeight: FontWeight.bold)),
-                                      InkWell(
-                                        onTap: () {
-                                          Navigator.of(context).push(
-                                              MaterialPageRoute(
-                                                  builder: (BuildContext
-                                                          context) =>
-                                                      RestaurantInfoScreen(provider
-                                                          .selectedRestModel)));
-                                        },
-                                        child: Text(
-                                          'Info',
-                                          style: TextStyle(
-                                              color: Colors.deepOrange,
-                                              fontWeight: FontWeight.w600),
-                                        ),
-                                      )
-                                    ],
-                                  ),
-                                  SizedBox(
-                                    height: 8,
-                                  ),
-                                  Text(provider
-                                      .selectedRestModel.branchCuisine!),
-                                  SizedBox(
-                                    height: 25,
-                                  ),
-                                  Row(
-                                    children: [
-                                      Icon(
-                                        Icons.tag_faces,
-                                        color: Colors.grey.shade700,
-                                        size: 25,
-                                      ),
-                                      SizedBox(width: 10),
-                                      RichText(
-                                        text: new TextSpan(
-                                          children: [
-
-
-
-                                            TextSpan(text: "Amaze ",
+
+                                // _singleRestModel.branchDetails!.merchantBranchImage!,
+                                // 'https://cdn-prod.medicalnewstoday.com/content/images/articles/314/314819/delicious-buffet-foods.jpg',
+                                fit: BoxFit.cover,
+                              ),
+                            ),
+                          ),
+                          SliverList(
+                              delegate: SliverChildListDelegate([
+                            SingleChildScrollView(
+                              child: Padding(
+                                padding: const EdgeInsets.only(
+                                    left: 20.0,
+                                    right: 20.0,
+                                    bottom: 10,
+                                    top: 20.0),
+                                child: Column(
+                                  crossAxisAlignment: CrossAxisAlignment.start,
+                                  children: [
+                                    Row(
+                                      mainAxisAlignment:
+                                          MainAxisAlignment.spaceBetween,
+                                      children: [
+                                        Text(
+                                            // Provider.of<ApplicationProvider>(context ,listen: false).selectedRestModel.branchDetails!.merchantBranchName!,
+                                            provider
+                                                .selectedRestModel
+                                                .branchDetails!
+                                                .merchantBranchName!,
+                                            style: TextStyle(
+                                                fontSize: 20,
+                                                fontWeight: FontWeight.bold)),
+                                        InkWell(
+                                          onTap: () {
+                                            Navigator.of(context).push(
+                                                MaterialPageRoute(
+                                                    builder: (BuildContext
+                                                            context) =>
+                                                        RestaurantInfoScreen(provider
+                                                            .selectedRestModel)));
+                                          },
+                                          child: Text(
+                                            'Info',
+                                            style: TextStyle(
+                                                color: Colors.deepOrange,
+                                                fontWeight: FontWeight.w600),
+                                          ),
+                                        )
+                                      ],
+                                    ),
+                                    SizedBox(
+                                      height: 8,
+                                    ),
+                                    Text(provider
+                                        .selectedRestModel.branchCuisine!),
+                                    SizedBox(
+                                      height: 25,
+                                    ),
+                                    Row(
+                                      children: [
+                                        Icon(null!= provider.selectedRestModel.reviews!.numOfRows &&
+                                            provider.selectedRestModel.reviews!.numOfRows == 0?
+                                          Icons.sentiment_dissatisfied:Icons.tag_faces,
+                                          color:null!= provider.selectedRestModel.reviews!.numOfRows &&
+                                              provider.selectedRestModel.reviews!.numOfRows == 0?
+                                              Colors.yellow[600]:
+                                          Colors.grey.shade700,
+                                          size: 25,
+                                        ),
+                                        SizedBox(width: 10),
+                                        RichText(
+                                          text: new TextSpan(
+                                            children: [
+                                              TextSpan(text:null!= provider.selectedRestModel.reviews!.numOfRows &&
+                                                provider.selectedRestModel.reviews!.numOfRows == 0? "No review yet "
+                                                :provider.selectedRestModel.reviews!.branchAvgRating.toString(),
 
-                                              style: new TextStyle(
-                                                color: Colors.black,
-                                              ),
-                                            ),
-                                            new TextSpan(
-                                              text:
-                                                  'Based on (${provider.selectedRestModel.reviews!.numOfRows}) ratings ',
-                                              style: new TextStyle(
-                                                fontSize: 12,
-                                                color: Colors.grey,
-                                              ),
-                                            ),
-                                          ],
-                                        ),
-                                      ),
-                                      Expanded(
-                                        child: InkWell(
-                                          onTap: () {
-                                            Navigator.of(context).push(
-                                                MaterialPageRoute(
-                                                    builder: (BuildContext
-                                                            context) =>
-                                                        ReviewRestaurent()));
-                                          },
-                                          child: Text(
-                                            'Reviews',
-                                            style: TextStyle(
-                                                color: Colors.deepOrange,
-                                                fontWeight: FontWeight.w600),
-                                            textAlign: TextAlign.right,
-                                          ),
-                                        ),
-                                      ),
-                                    ],
-                                  ),
-                                  Divider(
-                                    height: 25,
-                                  ),
-                                  Row(
-                                    children: [
-                                      Icon(
-                                        Icons.access_time,
-                                        color: Colors.grey.shade700,
-                                        size: 25,
-                                      ),
-                                      SizedBox(width: 10),
-                                      RichText(
-                                        text: new TextSpan(
-                                          children: [
-                                            new TextSpan(
-                                              text:
-                                                  'Within ${provider.selectedRestModel.branchDetails!.merchantBranchOrderTime} mins ',
-                                              style: new TextStyle(
-                                                  color: Colors.black),
-                                            ),
-                                            new TextSpan(
-                                              text:
-                                                  '(${provider.selectedRestModel.branchDetails!.countryCurrency} 0.590 delivery) ',
-                                              style: new TextStyle(
-                                                  fontSize: 12,
-                                                  color: Colors.grey),
-                                            ),
+                                                style: new TextStyle(
+                                                  color: Colors.black,
+                                                ),
+                                              ),
+                                              new TextSpan(
+                                                text:
+                                                    'Based on (${provider.selectedRestModel.reviews!.numOfRows}) ratings ',
+                                                style: new TextStyle(
+                                                  fontSize: 12,
+                                                  color: Colors.grey,
+                                                ),
+                                              ),
+                                            ],
+                                          ),
+                                        ),
+                                        Expanded(
+                                          child: InkWell(
+                                            onTap: () {
+                                              Navigator.of(context).push(
+                                                  MaterialPageRoute(
+                                                      builder: (BuildContext
+                                                              context) =>
+                                                          ReviewRestaurent()));
+                                            },
+                                            child: Text(
+                                              'Reviews',
+                                              style: TextStyle(
+                                                  color: Colors.deepOrange,
+                                                  fontWeight: FontWeight.w600),
+                                              textAlign: TextAlign.right,
+                                            ),
+                                          ),
+                                        ),
+                                      ],
+                                    ),
+                                    Divider(
+                                      height: 25,
+                                    ),
+                                    Row(
+                                      children: [
+                                        Icon(
+                                          Icons.access_time,
+                                          color: Colors.grey.shade700,
+                                          size: 25,
+                                        ),
+                                        SizedBox(width: 10),
+                                        RichText(
+                                          text: new TextSpan(
+                                            children: [
+                                              new TextSpan(
+                                                text:
+                                                    'Within ${provider.selectedRestModel.branchDetails!.merchantBranchOrderTime} mins ',
+                                                style: new TextStyle(
+                                                    color: Colors.black),
+                                              ),
+                                              // new TextSpan(
+                                              //   text:
+                                              //       '(${provider.selectedRestModel.branchDetails!.countryCurrency} 0.590 delivery) ',
+                                              //   style: new TextStyle(
+                                              //       fontSize: 12,
+                                              //       color: Colors.grey),
+                                              // ),
 
-                                          ],
-                                        ),
-                                      ),
+                                            ],
+                                          ),
+                                        ),
 
 
 
@@ -274,411 +284,356 @@
 
 
 
-                                    ],
-                                  ),
-                                  Divider(
-                                    height: 25,
-                                  ),
-                                  Row(
-                                    children: [
-                                      Icon(
-                                        Icons.local_offer_outlined,
-                                        color: Colors.pinkAccent,
-                                        size: 25,
-                                      ),
-                                      SizedBox(width: 10),
-                                      Text('2 RO Off Orders 7 Rials or More!',
-                                          style: TextStyle(
-                                            color: Colors.pinkAccent,
-                                            fontWeight: FontWeight.w500,
-                                          ))
-                                    ],
-                                  ),
-                                  Divider(
-                                    height: 25,
-                                  ),
-                                  Container(
-                                    padding: EdgeInsets.all(15),
-                                    width: Helper.getScreenWidth(context),
-                                    decoration: BoxDecoration(
-                                        borderRadius:
-                                            BorderRadius.circular(12.0),
-                                        color: Colors.grey.shade100),
-                                    child: Text(
-                                      'Delivered by us, with live tracking',
-                                      style: TextStyle(
-                                        color: Colors.black,
-                                        fontWeight: FontWeight.w600,
-                                      ),
-                                    ),
-                                  ),
+                                      ],
+                                    ),
+                                    Divider(
+                                      height: 25,
+                                    ),
+                                    Row(
+                                      children: [
+                                        Icon(
+                                          Icons.local_offer_outlined,
+                                          color: Colors.pinkAccent,
+                                          size: 25,
+                                        ),
+                                        SizedBox(width: 10),
+                                        Text('2 RO Off Orders 7 Rials or More!',
+                                            style: TextStyle(
+                                              color: Colors.pinkAccent,
+                                              fontWeight: FontWeight.w500,
+                                            ))
+                                      ],
+                                    ),
+                                    Divider(
+                                      height: 25,
+                                    ),
+                                    Container(
+                                      padding: EdgeInsets.all(15),
+                                      width: Helper.getScreenWidth(context),
+                                      decoration: BoxDecoration(
+                                          borderRadius:
+                                              BorderRadius.circular(12.0),
+                                          color: Colors.grey.shade100),
+                                      child: Text(
+                                        'Delivered by us, with live tracking',
+                                        style: TextStyle(
+                                          color: Colors.black,
+                                          fontWeight: FontWeight.w600,
+                                        ),
+                                      ),
+                                    ),
 
-                                  // ProductCategoryItem(widget.merchantBranchId,
-                                  //     widget.lat, widget.lng),
-                                ],
-                              ),
-                            ),
-                          )
-                        ])),
-                        SliverPersistentHeader(
-                          pinned: true,
-                          delegate: PersistentHeader(
-                            widget: Padding(
-                              padding: const EdgeInsets.only(left: 15.0),
-                              child: Row(
-                                  crossAxisAlignment: CrossAxisAlignment.center,
-                                  children: [
-                                    InkWell(
-                                        child: Icon(Icons.menu,
-                                            color: Colors.deepOrange),
-                                        onTap: () {
-                                          onButtonpress(context);
-                                        }),
-                                    Flexible(
-                                      child: Container(
-                                        height: 40,
-                                        width:
-                                            MediaQuery.of(context).size.width,
-                                        child: ListView.builder(
-                                            scrollDirection: Axis.horizontal,
-                                            physics: ScrollPhysics(),
-                                            shrinkWrap: true,
-                                            itemCount:
-                                                provider.categoryList.length,
-                                            itemBuilder: (context, index) {
-                                              return ProductCategory(
-                                                title: provider
-                                                    .categoryList[index]
-                                                    .categoryName!,
-                                                // isActive: true,
-                                                // color:selectedIndex == index ? Colors.deepOrange : null,
-                                                textColor:
-                                                    provider.selectedCategoryIndex ==
-                                                            index
-                                                        ? Colors.white
-                                                        : Colors.black,
-                                                color:
-                                                    provider.selectedCategoryIndex ==
-                                                            index
-                                                        ? Colors.deepOrange
-                                                        : null,
-                                                press: () {
-                                                  setState(() {
-                                                    isSwitched = false;
-                                                  });
-                                                  provider
-                                                      .currentSelectedCategory(
-                                                          index);
-                                                  if (provider
-                                                          .selectedCategoryIndex ==
-                                                      index) {
-                                                    setState(() {
-                                                      if (provider
-                                                              .categoryList[
-                                                                  index]
-                                                              .categoryId ==
-                                                          "0") {
-                                                        filteredList = provider
-                                                            .selectedRestModel
-                                                            .items!;
-                                                        filteredList.sort(
-                                                            (a, b) => a
-                                                                .categoryName!
-                                                                .compareTo(b
-                                                                    .categoryName!));
-                                                      } else {
-                                                        filteredList = provider
-                                                            .selectedRestModel
-                                                            .items!
-                                                            .where((product) => (product
-                                                                    .categoryId ==
-                                                                provider
-                                                                    .categoryList[
-                                                                        index]
-                                                                    .categoryId))
-                                                            .toList();
-                                                        filteredList.sort(
-                                                            (a, b) => a
-                                                                .categoryName!
-                                                                .compareTo(b
-                                                                    .categoryName!));
-                                                      }
-                                                      // Provider.of<ApplicationProvider>(context, listen: false).clearItems();
-                                                      provider
-                                                          .setItemLoading(true);
-                                                      loadedItemCount = 0;
-                                                      _loadData();
-                                                    });
-                                                    provider.addProductData(
-                                                        filteredList,
-                                                        true,
-                                                        index);
-                                                  }
-                                                  // Provider.of<ApplicationProvider>(context ,listen: false).filterItems(categoryList[index].categoryId!);
-
-                                                  provider.setCategoryName(
-                                                      provider
-                                                          .categoryList[index]
-                                                          .categoryName!);
-                                                },
-                                              );
-                                            }),
-                                      ),
-                                    )
-                                  ]),
-                            ),
-                          ),
-                        ),
-                        SliverList(
-                            delegate: SliverChildListDelegate([
-                          Padding(
-                            padding: const EdgeInsets.all(15.0),
-                            child: Column(
-                              crossAxisAlignment: CrossAxisAlignment.start,
-                              children: [
-                                Row(
-                                  children: [
-                                    Text(
-                                      'VEG',
-                                      style: TextStyle(
-                                          fontWeight: FontWeight.w600),
-                                    ),
-                                    Switch(
-                                      value: isSwitched,
-                                      onChanged: (value) {
-                                        setState(() {
-                                          isSwitched = value;
-                                          // if(isSwitched){
-                                          //   provider.setItemLoading(
-                                          //       true);
-                                          //   List<Item> vegList =[];
-                                          //   vegList =  provider.filteredLoadedProductModelList!
-                                          //       .where((product) => (product
-                                          //       .itemVegNonveg ==
-                                          //       "1"))
-                                          //       .toList();
-                                          //   provider.setItemLoading(
-                                          //       false);
-                                          //   provider.addProductData(
-                                          //       vegList,
-                                          //       true,
-                                          //       provider.selectedCategoryIndex!);
-                                          //
-                                          // }else{
-                                          //   if (provider.selectedCategoryIndex ==
-                                          //       provider.selectedCategoryIndex!) {
-                                          //     setState(() {
-                                          //       if (provider.categoryList[
-                                          //       provider.selectedCategoryIndex!]
-                                          //           .categoryId ==
-                                          //           "0") {
-                                          //         filteredList = provider.selectedRestModel
-                                          //             .items!;
-                                          //         filteredList.sort((a,
-                                          //             b) =>
-                                          //             a.categoryName!
-                                          //                 .compareTo(b
-                                          //                 .categoryName!));
-                                          //       } else {
-                                          //         filteredList = provider.selectedRestModel
-                                          //             .items!
-                                          //             .where((product) => (product
-                                          //             .categoryId ==
-                                          //             provider.categoryList[
-                                          //             provider.selectedCategoryIndex!]
-                                          //                 .categoryId))
-                                          //             .toList();
-                                          //         filteredList.sort((a,
-                                          //             b) =>
-                                          //             a.categoryName!
-                                          //                 .compareTo(b
-                                          //                 .categoryName!));
-                                          //       }
-                                          //       // Provider.of<ApplicationProvider>(context, listen: false).clearItems();
-                                          //       // provider.setItemLoading(
-                                          //       //     true);
-                                          //       loadedItemCount = 0;
-                                          //       _loadData();
-                                          //     });
-                                          //     provider.addProductData(
-                                          //         filteredList,
-                                          //         true,
-                                          //         provider.selectedCategoryIndex!);
-                                          //   }
-                                          //   provider.addProductData(
-                                          //       filteredList,
-                                          //       true,
-                                          //       provider.selectedCategoryIndex!);
-                                          // }
-                                        });
-                                      },
-                                      activeTrackColor: Colors.green.shade100,
-                                      activeColor: Colors.green.shade300,
-                                    ),
-                                  ],
-                                ),
-                                SizedBox(
-                                  height: 20,
-                                ),
-                                Text(
-                                  null != provider.catName
-                                      ? provider.catName!
-                                      : '',
-                                  style: TextStyle(
-                                      fontWeight: FontWeight.w600,
-                                      fontSize: 18),
-                                ),
-                                RestaurantProductsList(isSwitched),
-                                SizedBox(
-                                  height: 30,
-                                ),
-                              ],
-                            ),
-                          ),
-                        ]))
-                      ],
-                    ),
-                    Align(
-                        alignment: Alignment.bottomCenter,
-                        child: Padding(
-                          padding: const EdgeInsets.only(bottom: 100.0),
-                          child: provider.isItemLoading
-                              ? CircularProgressIndicator(
-                                  color: Colors.deepOrangeAccent,
-                                )
-                              : Container(
-                                  height: 0,
-                                ),
-                        )),
-                    Align(
-                      alignment: Alignment.bottomCenter,
-                      child: Container(
-                        height: 60,
-                        padding:
-                            EdgeInsets.only(left: 20, right: 20, bottom: 10),
-                        width: double.infinity,
-                        child: ElevatedButton(
-                          onPressed: () {
-                            if (provider.cartModelList.length > 0) {
-                              Navigator.of(context)
-                                  .push(MaterialPageRoute(
-                                      builder: (BuildContext context) =>
-                                          ItemBasketHome()))
-                                  .then((value) {
-                                if (Provider.of<ApplicationProvider>(context,
-                                            listen: false)
-                                        .selectedCategoryIndex ==
-                                    0) {
-                                  filteredList =
-                                      Provider.of<ApplicationProvider>(context,
-                                              listen: false)
-                                          .selectedRestModel
-                                          .items!;
-                                  filteredList.sort((a, b) => a.categoryName!
-                                      .compareTo(b.categoryName!));
-                                } else {
-                                  filteredList = Provider.of<
-                                              ApplicationProvider>(context,
-                                          listen: false)
-                                      .selectedRestModel
-                                      .items!
-                                      .where((product) => (product.categoryId ==
-                                          Provider.of<ApplicationProvider>(
-                                                  context,
-                                                  listen: false)
-                                              .categoryList[Provider.of<
-                                                          ApplicationProvider>(
-                                                      context,
-                                                      listen: false)
-                                                  .selectedCategoryIndex!]
-                                              .categoryId))
-                                      .toList();
-                                  filteredList.sort((a, b) => a.categoryName!
-                                      .compareTo(b.categoryName!));
-                                }
-                                // Provider.of<ApplicationProvider>(context, listen: false).clearItems();
-                                Provider.of<ApplicationProvider>(context,
-                                        listen: false)
-                                    .setItemLoading(true);
-                                loadedItemCount = 0;
-                                _loadData();
-                              });
-                            }
-                          },
-                          child: Row(
-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                            children: [
-                              Container(
-                                child: Row(
-                                  children: [
-                                    Container(
-                                      decoration: BoxDecoration(
-                                        shape: BoxShape.circle,
-                                        border: Border.all(
-                                          width: 2, //
-                                          color: Colors.white,
-                                        ),
-                                      ),
-                                      child: Padding(
-                                        padding: const EdgeInsets.all(8.0),
-                                        child: Text(
-                                          provider.cartModelList.length
-                                              .toString(),
-                                          style: TextStyle(fontSize: 20),
-                                        ),
-                                      ),
-                                    ),
-                                    SizedBox(
-                                      width: 15,
-                                    ),
-                                    Text(
-                                      'View basket',
-                                      style: TextStyle(
-                                          color: Colors.white, fontSize: 18),
-                                    ),
-                                  ],
-                                ),
-                              ),
-                              Container(
-                                child: Row(
-                                  children: [
-                                    Text(
-                                      'Total',
-                                      style: TextStyle(
-                                          color: Colors.white, fontSize: 16),
-                                    ),
-                                    SizedBox(
-                                      width: 5,
-                                    ),
-                                    Text(
-                                      null != provider.totalCartPrice
-                                          ? '₹${provider.totalCartPrice}'
-                                          : "₹0",
-                                      style: TextStyle(
-                                          color: Colors.white,
-                                          fontSize: 16,
-                                          fontWeight: FontWeight.w700),
-                                    ),
-                                  ],
-                                ),
-                              )
-                            ],
-                          ),
-                          style: ElevatedButton.styleFrom(
-                            primary: provider.cartModelList.length > 0
-                                ? Colors.deepOrange
-                                : Colors.deepOrange.shade200,
-                            shape: RoundedRectangleBorder(
-                              borderRadius:
-                                  BorderRadius.circular(12), // <-- Radius
-                            ),
-                          ),
-                        ),
-                      ),
-                    )
-                  ],
-                );
-              }));
+                                    // ProductCategoryItem(widget.merchantBranchId,
+                                    //     widget.lat, widget.lng),
+                                  ],
+                                ),
+                              ),
+                            )
+                          ])),
+                          SliverPersistentHeader(
+                            pinned: true,
+                            floating: false,
+                            delegate: PersistentHeader(
+                              TabBar(
+                                indicatorWeight: 2.0,
+                                onTap: (int val) {
+                                  VerticalScrollableTabBarStatus.setIndex(val);
+                                },
+                                physics: const AlwaysScrollableScrollPhysics(),
+                                isScrollable: true,
+                                labelColor: Colors.white,
+                                unselectedLabelColor: Colors.black,
+                                indicatorColor: Colors.transparent,
+                                padding: EdgeInsets.zero,
+                                controller: tabController,
+                                indicator: BoxDecoration(
+                                  color: Colors.red,
+                                  borderRadius: BorderRadius.circular(10),
+                                ),
+                                labelStyle: const TextStyle(fontSize: 12, fontWeight: FontWeight.w500),
+                                tabs: provider.categoryList
+                                    .map((t) => Tab(
+                                  text: t.categoryName,
+                                ))
+                                    .toList(),
+                              ),
+
+                            // pinned: true,
+                            )
+                            // delegate: PersistentHeader(
+                            //   widget: Padding(
+                            //     padding: const EdgeInsets.only(left: 15.0),
+                            //     child: Row(
+                            //         crossAxisAlignment: CrossAxisAlignment.center,
+                            //         children: [
+                            //           InkWell(
+                            //               child: Icon(Icons.menu,
+                            //                   color: Colors.deepOrange),
+                            //               onTap: () {
+                            //                 onButtonpress(context);
+                            //               }),
+                            //           SizedBox(width: 10,),
+                            //           Flexible(
+                            //             child: Container(
+                            //               height: 40,
+                            //               width:
+                            //                   MediaQuery.of(context).size.width,
+                            //               child: ListView.builder(
+                            //                   scrollDirection: Axis.horizontal,
+                            //                   physics: ScrollPhysics(),
+                            //                   shrinkWrap: true,
+                            //                   itemCount:
+                            //                       provider.categoryList.length,
+                            //                   itemBuilder: (context, index) {
+                            //                     return ProductCategory(
+                            //                       title: provider
+                            //                           .categoryList[index]
+                            //                           .categoryName!,
+                            //                       // isActive: true,
+                            //                       // color:selectedIndex == index ? Colors.deepOrange : null,
+                            //                       textColor:
+                            //                           provider.selectedCategoryId ==
+                            //                               provider
+                            //                                   .categoryList[index].categoryId
+                            //                               ? Colors.white
+                            //                               : Colors.black,
+                            //                       color:
+                            //                           provider.selectedCategoryId ==
+                            //                               provider
+                            //                                   .categoryList[index].categoryId
+                            //                               ? Colors.deepOrange
+                            //                               : null,
+                            //                       press: () {
+                            //                         setState(() {
+                            //                           isSwitched = false;
+                            //                         });
+                            //
+                            //                         provider
+                            //                             .currentSelectedCategory(
+                            //                             provider
+                            //                                 .categoryList[
+                            //                             index]
+                            //                                 .categoryId!);
+                            //                         if (provider
+                            //                                 .selectedCategoryId ==
+                            //                            provider.categoryList[index].categoryId) {
+                            //                           setState(() {
+                            //                             if (provider
+                            //                                     .categoryList[
+                            //                                         index]
+                            //                                     .categoryId ==
+                            //                                 0) {
+                            //                               filteredList = provider
+                            //                                   .selectedRestModel
+                            //                                   .items!;
+                            //                               filteredList.sort(
+                            //                                   (a, b) => a
+                            //                                       .categoryName!
+                            //                                       .compareTo(b
+                            //                                           .categoryName!));
+                            //                             } else {
+                            //                               filteredList = provider
+                            //                                   .selectedRestModel
+                            //                                   .items!
+                            //                                   .where((product) => (product
+                            //                                           .categoryId ==
+                            //                                       provider.selectedCategoryId))
+                            //                                   .toList();
+                            //                               filteredList.sort(
+                            //                                   (a, b) => a
+                            //                                       .categoryName!
+                            //                                       .compareTo(b
+                            //                                           .categoryName!));
+                            //                             }
+                            //                             // Provider.of<ApplicationProvider>(context, listen: false).clearItems();
+                            //                             provider
+                            //                                 .setItemLoading(true);
+                            //                             loadedItemCount = 0;
+                            //                             _loadData();
+                            //                           });
+                            //                           provider.addProductData(
+                            //                               filteredList,
+                            //                               true);
+                            //                         }
+                            //                         // Provider.of<ApplicationProvider>(context ,listen: false).filterItems(categoryList[index].categoryId!);
+                            //
+                            //                         provider.setCategoryName(
+                            //                             provider
+                            //                                 .categoryList[index]
+                            //                                 .categoryName!);
+                            //                       },
+                            //                     );
+                            //                   }),
+                            //             ),
+                            //           )
+                            //         ]),
+                            //   ),
+                            // ),
+                          ),
+                          SliverList(
+                              delegate: SliverChildListDelegate([
+                            Padding(
+                              padding: const EdgeInsets.all(4),
+                              child: Column(
+                                crossAxisAlignment: CrossAxisAlignment.start,
+                                children: [
+                                  // Row(
+                                  //   children: [
+                                  //     Text(
+                                  //       'VEG',
+                                  //       style: TextStyle(
+                                  //           fontWeight: FontWeight.w600),
+                                  //     ),
+                                  //     Switch(
+                                  //       value: isSwitched,
+                                  //       onChanged: (value) {
+                                  //         setState(() {
+                                  //           isSwitched = value;
+                                  //         });
+                                  //       },
+                                  //       activeTrackColor: Colors.green.shade100,
+                                  //       activeColor: Colors.green.shade300,
+                                  //     ),
+                                  //   ],
+                                  // ),
+                                  // SizedBox(
+                                  //   height: 20,
+                                  // ),
+                                  RestaurantProductsList(isSwitched,tabController),
+                                  // SizedBox(
+                                  //   height: 30,
+                                  // ),
+                                ],
+                              ),
+                            ),
+                          ]))
+                        ],
+                      ),
+                      Align(
+                          alignment: Alignment.bottomCenter,
+                          child: Padding(
+                            padding: const EdgeInsets.only(bottom: 100.0),
+                            child:  Container(
+                                    height: 0,
+                                  ),
+                          )),
+                      Align(
+                        alignment: Alignment.bottomCenter,
+                        child: Container(
+                          height: 60,
+                          padding:
+                              EdgeInsets.only(left: 20, right: 20, bottom: 10),
+                          width: double.infinity,
+                          child: ElevatedButton(
+                            onPressed: () {
+                              if (provider.cartModelList.length > 0) {
+                                Navigator.of(context)
+                                    .push(MaterialPageRoute(
+                                        builder: (BuildContext context) =>
+                                            ItemBasketHome()))
+                                    .then((value) {
+                                  if (provider.selectedCategoryId ==
+                                      0) {
+                                    filteredList =
+                                       provider
+                                            .selectedRestModel
+                                            .items!;
+                                    filteredList.sort((a, b) => a.categoryName!
+                                        .compareTo(b.categoryName!));
+                                  } else {
+                                    filteredList =provider
+                                        .selectedRestModel
+                                        .items!
+                                        .where((product) => (product.categoryId ==
+                                            provider.selectedCategoryId!))
+                                        .toList();
+                                    filteredList.sort((a, b) => a.categoryName!
+                                        .compareTo(b.categoryName!));
+                                  }
+                                  // Provider.of<ApplicationProvider>(context, listen: false).clearItems();
+                                  Provider.of<ApplicationProvider>(context,
+                                          listen: false)
+                                      .setItemLoading(true);
+                                  loadedItemCount = 0;
+                                  _loadData();
+                                });
+                              }
+                            },
+                            child: Row(
+                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                              children: [
+                                Container(
+                                  child: Row(
+                                    children: [
+                                      Container(
+                                        decoration: BoxDecoration(
+                                          shape: BoxShape.circle,
+                                          border: Border.all(
+                                            width: 2, //
+                                            color: Colors.white,
+                                          ),
+                                        ),
+                                        child: Padding(
+                                          padding: const EdgeInsets.all(8.0),
+                                          child: Text(
+                                            provider.cartModelList.length
+                                                .toString(),
+                                            style: TextStyle(fontSize: 20),
+                                          ),
+                                        ),
+                                      ),
+                                      SizedBox(
+                                        width: 15,
+                                      ),
+                                      Text(
+                                        'View basket',
+                                        style: TextStyle(
+                                            color: Colors.white, fontSize: 18),
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                                Container(
+                                  child: Row(
+                                    children: [
+                                      Text(
+                                        'Total',
+                                        style: TextStyle(
+                                            color: Colors.white, fontSize: 16),
+                                      ),
+                                      SizedBox(
+                                        width: 5,
+                                      ),
+                                      Text(
+                                        null != provider.totalWithoutTax
+                                            ? '₹${provider.totalWithoutTax}'
+                                            : "₹0",
+                                        style: TextStyle(
+                                            color: Colors.white,
+                                            fontSize: 16,
+                                            fontWeight: FontWeight.w700),
+                                      ),
+                                    ],
+                                  ),
+                                )
+                              ],
+                            ),
+                            style: ElevatedButton.styleFrom(
+                              primary: provider.cartModelList.length > 0
+                                  ? Colors.deepOrange
+                                  : Colors.deepOrange.shade200,
+                              shape: RoundedRectangleBorder(
+                                borderRadius:
+                                    BorderRadius.circular(12), // <-- Radius
+                              ),
+                            ),
+                          ),
+                        ),
+                      )
+                    ],
+                  );
+                }),
+        ));
   }
 
   getRestDetails() async {
@@ -700,7 +655,7 @@
       Provider.of<ApplicationProvider>(context, listen: false)
           .setCurrentRestModel(_singleRestModel);
       Provider.of<ApplicationProvider>(context, listen: false)
-          .addProductData(_singleRestModel.items!, true, 0);
+          .addProductData(_singleRestModel.items!, true);
 
       // Provider.of<ApplicationProvider>(context ,listen: false).filterItems(_singleRestModel.items![0].categoryId!);
       // Provider.of<ApplicationProvider>(context ,listen: false).setCategoryName(_singleRestModel.categories![0].categoryName!);
@@ -757,17 +712,24 @@
 
     if (json['error_code'] == 0) {
       List dataList = json['categories'];
+
       if (null != dataList && dataList.length > 0) {
         categoryList = dataList
             .map((spacecraft) => new Category.fromJson(spacecraft))
             .toList();
-        categoryList.insert(
-            0, new Category(categoryId: "0", categoryName: "All"));
+        // categoryList.insert(
+        //     0, new Category(categoryId: 0, categoryName: "All"));
       }
       Provider.of<ApplicationProvider>(context, listen: false)
           .setCategoryName(categoryList.first.categoryName!);
       Provider.of<ApplicationProvider>(context, listen: false)
           .setCategoryList(categoryList);
+      tabController = TabController(length: categoryList.length, vsync: this);
+      tabController!.addListener(() {
+        setState(() {
+          // selectedIndex = tabController!.index;
+        });
+      });
       setState(() {});
     } else {
       print("some error occured!!!");
@@ -779,6 +741,7 @@
       isScrollControlled: false,
       context: context,
       builder: (context) {
+
         return Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
@@ -808,9 +771,12 @@
               physics: ScrollPhysics(),
               itemCount: categoryList.length,
               itemBuilder: (context, index) {
+                // var count = Provider.of<ApplicationProvider>(context, listen: false).selectedRestModel.items!.
+                // where((c) => c.categoryId == categoryList[index].categoryId).toList();
+
                 return ListTile(
                   title: Text(categoryList[index].categoryName.toString()),
-                  trailing: Text("$index"),
+                  // trailing: Text("${count.length}"),
                   // trailing: Text('5'),
                 );
               },
@@ -856,28 +822,47 @@
 }
 
 class PersistentHeader extends SliverPersistentHeaderDelegate {
-  final Widget? widget;
+  PersistentHeader(this.tabBar);
 
-  PersistentHeader({this.widget});
+  final TabBar tabBar;
 
   @override
-  Widget build(
-      BuildContext context, double shrinkOffset, bool overlapsContent) {
-    return Container(
-      padding: EdgeInsets.zero,
-      color: Colors.white,
-      child: Card(elevation: 2, child: Center(child: widget)),
-    );
-  }
-
+  double get minExtent => tabBar.preferredSize.height;
   @override
-  double get maxExtent => 56.0;
+  double get maxExtent => tabBar.preferredSize.height;
 
   @override
-  double get minExtent => 56.0;
+  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
+    return
+     Container(
+        padding: const EdgeInsets.only(left: 20.0, right: 20.0, top: 8.0, bottom: 8.0),
+       decoration: BoxDecoration(
+         color: Colors.white,
+         border: Border(bottom: BorderSide(color: Colors.grey, width: 1)),
+       ),
+        child:Row(
+          children: [
+            InkWell(
+                child: Icon(Icons.menu,
+                    color: Colors.deepOrange),
+                onTap: () {
+                  // onButtonpress(context);
+                }),
+            Flexible(
+              flex: 1,
+              child: Container(
+                margin: EdgeInsets.only(left: 8),
+                child:tabBar,
+              ),
+            )
+          ],
+        )
+    );
+  }
+
 
   @override
   bool shouldRebuild(SliverPersistentHeaderDelegate oldDelegate) {
-    return true;
+    return false;
   }
 }
Index: lib/screens/home/sections/groceryCardList.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/home/sections/groceryCardList.dart b/lib/screens/home/sections/groceryCardList.dart
--- a/lib/screens/home/sections/groceryCardList.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/home/sections/groceryCardList.dart	(date 1651902263010)
@@ -38,9 +38,9 @@
       cardName: null!=item.merchantBranchName?item.merchantBranchName:"",
       cardTime: null!=item.merchantBranchOrderTime?item.merchantBranchOrderTime:"",
       cardType: null!=item.cuisines?item.cuisines:"",
-      rating: null!=item.avgReview?item.avgReview:"",
+      rating: null!=item.avgReview||item.avgReview == "0"?item.avgReview:"No reviews yet",
       deliveryCharge: '',
-      bannerName: null!=item.merchantBranchImage?item.merchantBranchImage:"",
+      bannerName: null!=item.merchantBranchCoverImage?item.merchantBranchCoverImage:item.merchantBranchImage,
       discount: "",
       busy: null!=item.merchantBranchBusy?item.merchantBranchBusy:"",
       press: (){
Index: lib/screens/home/homeScreen.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/home/homeScreen.dart b/lib/screens/home/homeScreen.dart
--- a/lib/screens/home/homeScreen.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/home/homeScreen.dart	(date 1651901394954)
@@ -5,6 +5,7 @@
 import 'package:foodzer_customer_app/Preferences/Preferences.dart';
 import 'package:foodzer_customer_app/Services/geolocator_service.dart';
 import 'package:foodzer_customer_app/Services/myGlobalsService.dart';
+import 'package:foodzer_customer_app/screens/basket/Section/itemBasketHome.dart';
 import 'package:foodzer_customer_app/screens/googleMapScreen.dart';
 import 'package:foodzer_customer_app/screens/home/changeAddressFromHome.dart';
 import 'package:foodzer_customer_app/screens/home/sections/body.dart';
@@ -115,20 +116,110 @@
             ],
           ),
         ),
-        actions: [
-          IconButton(
-            onPressed:(){
-              Navigator.of(context).push(MaterialPageRoute(
-                  builder: (BuildContext context) =>
-                      MainSearchScreen()));
-            },
-            icon: Icon(
-              Icons.search,
-              size: 24,
-              color: Colors.black,
-            ),
-          )
+        actions:
+        [
+          Padding(
+            padding:  EdgeInsets.all(10.0),
+            child: Container(
+              width: 35.0,
+              alignment: Alignment.center,
+              child: GestureDetector(
+                onTap: () {
+                 if( Provider.of<ApplicationProvider>(context, listen: false).cartModelList.length > 0) {
+                   Navigator.of(context).push(MaterialPageRoute(
+                       builder: (BuildContext context) =>
+                           ItemBasketHome()));
+                 } else {
+                   Navigator.of(context).push(MaterialPageRoute(
+                       builder: (BuildContext context) =>
+                           MainSearchScreen()));
+                 }
+
+
+                },
+                child: Stack(
+                  children: <Widget>[
+                     IconButton(
+                      icon: Icon(
+                        null!= Provider.of<ApplicationProvider>(context, listen: false).cartModelList &&
+                            Provider.of<ApplicationProvider>(context, listen: false).cartModelList.length > 0?
+                        Icons.shopping_basket_sharp:Icons.search,
+                        color: Colors.black,
+                      ),
+                      onPressed: null,
+                    ),
+                    Provider.of<ApplicationProvider>(context, listen: false).cartModelList.length == 0
+                        ? Container()
+                        : Positioned(
+                      top: 0,
+                      right: 0,
+                      child: Stack(
+                        children: <Widget>[
+                          Container(
+                            height: 20.0,
+                            width: 20.0,
+                            decoration:  BoxDecoration(
+                              color: Colors.deepOrange,
+                              shape: BoxShape.circle,
+                            ),
+                            child:  Center(
+                              child: Text(
+                                Provider.of<ApplicationProvider>(context, listen: false).cartModelList.length.toString(),
+                                style: TextStyle(
+                                  fontSize: 11.0,
+                                  fontWeight: FontWeight.bold,
+                                ),
+                              ),
+                            ),
+                          ),
+                        ],
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+            ),
+          ),
         ],
+        // [
+        //  Stack(
+        //    alignment: Alignment.center,
+        //    children: [
+        //      IconButton(
+        //        onPressed:(){
+        //          Navigator.of(context).push(MaterialPageRoute(
+        //              builder: (BuildContext context) =>
+        //                  MainSearchScreen()));
+        //        },
+        //        icon: Icon(
+        //          null!= Provider.of<ApplicationProvider>(context, listen: false).cartModelList
+        //              && Provider.of<ApplicationProvider>(context, listen: false).cartModelList.length>0?
+        //          Icons.shopping_basket_sharp:Icons.search,
+        //          size: 30,
+        //          color: Colors.black,
+        //        ),
+        //      ),
+        //      Positioned(
+        //        right: 0,
+        //        bottom: 0,
+        //        child: Container(
+        //          padding: EdgeInsets.all(4),
+        //          decoration: BoxDecoration(
+        //              color: Colors.deepOrange,
+        //            shape: BoxShape.circle
+        //          ),
+        //          child: Text(
+        //            "2",
+        //            style: TextStyle(
+        //              fontSize: 11,
+        //              color: Colors.white
+        //            ),
+        //          ),
+        //        ),
+        //      )
+        //    ],
+        //  )
+        // ],
       ),
       body:
       isLoading?
@@ -146,7 +237,7 @@
             child: Column(mainAxisAlignment: MainAxisAlignment.end, children: [
               Padding(
                 padding: EdgeInsets.only(bottom: 40),
-                child: Text("We are not present ath this loaction yet! We will let you know as\n\n                                     soon as we are here ",style: TextStyle(fontSize: 12),),
+                child: Text("We are not present at this location yet! We will let you know as\n\n                                     soon as we are here ",style: TextStyle(fontSize: 12),),
               ),
               ElevatedButton(
                 onPressed: () {},
Index: lib/Menu/Microfiles/PaymentSection/addNewUpi.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/Menu/Microfiles/PaymentSection/addNewUpi.dart b/lib/Menu/Microfiles/PaymentSection/addNewUpi.dart
--- a/lib/Menu/Microfiles/PaymentSection/addNewUpi.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/Menu/Microfiles/PaymentSection/addNewUpi.dart	(date 1651936060491)
@@ -58,7 +58,7 @@
                   color: Colors.black, fontSize: 15, fontWeight: FontWeight.w600),
             ),
             SizedBox(height: 3,),
-            Text("${provider.cartModelList.length} item . Total: ₹${provider.totalCartPrice}",
+            Text("${provider.cartModelList.length} item . Total: ₹${provider.totalWithoutTax}",
                 style: TextStyle(
                   color: Colors.grey.shade500,
                   fontSize: 12,
@@ -148,7 +148,7 @@
     Map<String, dynamic> inputParams = {
       "orderId": itemOrderId,
       "orderAmount": Provider.of<ApplicationProvider>(context, listen: false)
-          .totalCartPrice
+          .totalWithoutTax
           .toString(),
       "customerName": customerName,
       "orderNote": orderNote,
@@ -271,7 +271,7 @@
     });
     var map = new Map<String, dynamic>();
     map['amount'] = Provider.of<ApplicationProvider>(context, listen: false)
-        .totalCartPrice
+        .totalWithoutTax
         .toString();
     map['order_id'] = itemOrderId;
 
Index: lib/screens/innerdetails/section/singleItemView.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/innerdetails/section/singleItemView.dart b/lib/screens/innerdetails/section/singleItemView.dart
--- a/lib/screens/innerdetails/section/singleItemView.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/innerdetails/section/singleItemView.dart	(date 1651996082590)
@@ -1,17 +1,20 @@
 import 'package:flutter/material.dart';
 import 'package:fluttertoast/fluttertoast.dart';
 import 'package:foodzer_customer_app/Api/ApiData.dart';
+import 'package:foodzer_customer_app/Menu/Microfiles/PaymentSection/Constants/sapperator.dart';
 import 'package:foodzer_customer_app/Models/SingleRestModel.dart';
 import 'package:foodzer_customer_app/Models/itemAddonModel.dart';
 import 'package:foodzer_customer_app/blocs/application_bloc.dart';
+import 'package:foodzer_customer_app/screens/basket/Section/cartAddons.dart';
 import 'package:foodzer_customer_app/screens/basket/Section/itemBasketHome.dart';
 import 'package:foodzer_customer_app/utils/helper.dart';
 import 'package:provider/provider.dart';
 import 'package:http/http.dart' as http;
 import 'dart:convert' as convert;
+
 class SingleItemView extends StatefulWidget {
   Item itemModel;
- SingleItemView(this.itemModel);
+  SingleItemView(this.itemModel);
 
   @override
   _SingleItemViewState createState() => _SingleItemViewState();
@@ -24,22 +27,26 @@
   //         .length,
   //         (index) => false);
   bool isIncrement = false;
-  int itemCount = 1;
+  int itemCount = 0;
   dynamic itemPrice;
   dynamic totalPrice;
   bool isChecked = false;
-  List<Addons> addonModelList = [];
+  List<Addons> addOnList = [];
+  // List<Addons> mandatoryAddonList = [];
+  int lastAddonIndex = -1;
   bool isLoading = false;
-
+  int? radioValue;
+  bool isMandatory = false;
   @override
   void initState() {
     // TODO: implement initState
-    if(null!=widget.itemModel.enteredQty && null!=widget.itemModel.itemPrice){
-      totalPrice= widget.itemModel.itemPrice! * widget.itemModel.enteredQty!;
+    if (null != widget.itemModel.enteredQty &&
+        null != widget.itemModel.itemPrice) {
+      totalPrice = widget.itemModel.itemPrice! * widget.itemModel.enteredQty!;
     } else {
       totalPrice = widget.itemModel.itemPrice!;
     }
-    if(null!=widget.itemModel.enteredQty  ){
+    if (null != widget.itemModel.enteredQty) {
       itemCount = widget.itemModel.enteredQty!;
     }
     if (widget.itemModel.isAddon == 1) {
@@ -48,354 +55,638 @@
     itemPrice = widget.itemModel.itemPrice!;
     // totalPrice = widget.itemModel.itemPrice!;
 
-    setState(() {
-
-    });
+    setState(() {});
 
     super.initState();
   }
+
   @override
   void dispose() {
     // TODO: implement dispose
     super.dispose();
   }
+
   @override
   Widget build(BuildContext context) {
-
-    return isLoading?Center(child: CircularProgressIndicator(color: Colors.deepOrangeAccent,),):Container(
-      child: Column(
-        mainAxisSize: MainAxisSize.min,
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          Padding(
-              padding: const EdgeInsets.only(top:20.0),
-              child: Container(
-                decoration: BoxDecoration(
-                  color: Colors.white,
-                  shape: BoxShape.circle,
-                ),
-                child: IconButton(
-                  onPressed: () {
-                    Navigator.of(context).pop();
-                  },
-                  icon: Icon(
-                    Icons.close,
-                    color: Colors.black,
-                    size: 30,
+    return isLoading
+        ? Center(
+            child: CircularProgressIndicator(
+              color: Colors.deepOrangeAccent,
+            ),
+          )
+        : Container(
+            child: Column(
+              mainAxisSize: MainAxisSize.min,
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                Padding(
+                  padding: const EdgeInsets.only(top: 20.0),
+                  child: Container(
+                    decoration: BoxDecoration(
+                      color: Colors.white,
+                      shape: BoxShape.circle,
+                    ),
+                    child: IconButton(
+                      onPressed: () {
+                        Navigator.of(context).pop();
+                      },
+                      icon: Icon(
+                        Icons.close,
+                        color: Colors.black,
+                        size: 30,
+                      ),
+                    ),
                   ),
                 ),
-              ),),
-          Flexible(
-            child: ListView(
-              physics: ScrollPhysics(),
-              shrinkWrap: true,
-              // crossAxisAlignment: CrossAxisAlignment.start,
-              // mainAxisSize: MainAxisSize.min,
-              children: [
-                Container(
-                  width: Helper.getScreenWidth(context),
-                  height: 200,
-                  child: ClipRRect(
-                    borderRadius: BorderRadius.only(
-                      topLeft: Radius.circular(14),
-                      topRight: Radius.circular(14),
-                    ),
-                    child: Image.network(
-                      widget.itemModel.itemImage!,
-                      // 'https://mumbaimirror.indiatimes.com/photo/76424716.cms',
-                      fit: BoxFit.fill,
-                      height: double.infinity,
-                      width: double.infinity,
-                      alignment: Alignment.center,
-                    ),
-                  ),
-                ),
-                Padding(
-                  padding: const EdgeInsets.all(15.0),
-                  child: Container(
-                      child: Column(
-                        crossAxisAlignment: CrossAxisAlignment.start,
-                        children: [
-                          Text(
-                            widget.itemModel.itemName!,
-                            style: TextStyle(
-                                fontWeight: FontWeight.w600, fontSize: 18),
-                          ),
-                          SizedBox(
-                            height: 10,
-                          ),
-                          Text(
-                            widget.itemModel.itemDescription!,
-                            // 'Fried puff pastry balls, filled with spiced mashed potatoes and boondi. Served with spiced water and sweet tamarind sauce',
-                            style: TextStyle(
-                                color: Colors.grey.shade600,
-                                height: 1.5,
-                                fontWeight: FontWeight.w500),
-                          ),
-                          null != widget.itemModel.itemDescription
-                              ? SizedBox(
-                            height: 20,
-                          )
-                              : SizedBox(),
-                          Row(
-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                            children: [
-                              Text('INR $totalPrice',
-                                  style: TextStyle(
-                                      fontWeight: FontWeight.w600, fontSize: 16)),
-                              Container(
-                                decoration: new BoxDecoration(
-                                  color: Colors.white,
-                                  borderRadius:
-                                  BorderRadius.all(Radius.circular(12)),
-                                  boxShadow: [
-                                    BoxShadow(
-                                      color: Colors.grey.shade400,
-                                      blurRadius: 3.0,
-                                      spreadRadius: 1.0,
-                                    )
-                                  ],
-                                ),
-                                child: Row(
-                                  children: [
-                                    IconButton(
-                                      onPressed: () {
-                                        if (itemCount == 1) {
-                                          // Navigator.of(context).pop();
-                                        } else {
-                                          setState(() {
-                                            itemCount--;
-                                            totalPrice = double.parse(
-                                                totalPrice.toString()) -
-                                                double.parse(
-                                                    itemPrice.toString());
-                                          });
-                                        }
-                                      },
-                                      icon: Icon(
-                                        Icons.remove,
-                                        color: itemCount == 1?Colors.deepOrange.shade100:Colors.deepOrange,
-                                      ),
-                                    ),
-                                    SizedBox(
-                                      width: 15,
-                                    ),
-                                    Text(
-
+                Flexible(
+                  child: ListView(
+                    physics: ScrollPhysics(),
+                    shrinkWrap: true,
+                    // crossAxisAlignment: CrossAxisAlignment.start,
+                    // mainAxisSize: MainAxisSize.min,
+                    children: [
+                      Container(
+                        width: Helper.getScreenWidth(context),
+                        height: 200,
+                        child: ClipRRect(
+                          borderRadius: BorderRadius.only(
+                            topLeft: Radius.circular(14),
+                            topRight: Radius.circular(14),
+                          ),
+                          child: Image.network(
+                            widget.itemModel.itemImage!,
+                            // 'https://mumbaimirror.indiatimes.com/photo/76424716.cms',
+                            fit: BoxFit.fill,
+                            height: double.infinity,
+                            width: double.infinity,
+                            alignment: Alignment.center,
+                          ),
+                        ),
+                      ),
+                      Padding(
+                        padding: const EdgeInsets.all(15.0),
+                        child: Container(
+                            child: Column(
+                          crossAxisAlignment: CrossAxisAlignment.start,
+                          children: [
+                            Text(
+                              widget.itemModel.itemName!,
+                              style: TextStyle(
+                                  fontWeight: FontWeight.w600, fontSize: 18),
+                            ),
+                            SizedBox(
+                              height: 10,
+                            ),
+                            Text(
+                              widget.itemModel.itemDescription!,
+                              // 'Fried puff pastry balls, filled with spiced mashed potatoes and boondi. Served with spiced water and sweet tamarind sauce',
+                              style: TextStyle(
+                                  color: Colors.grey.shade600,
+                                  height: 1.5,
+                                  fontWeight: FontWeight.w500),
+                            ),
+                            null != widget.itemModel.itemDescription
+                                ? SizedBox(
+                                    height: 20,
+                                  )
+                                : SizedBox(),
+                            Row(
+                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                              children: [
+                                Text('INR '+widget.itemModel.itemPrice!.toStringAsFixed(2),
+                                    style: TextStyle(
+                                        fontWeight: FontWeight.w600,
+                                        fontSize: 16)),
+                                Container(
+                                  decoration: new BoxDecoration(
+                                    color: Colors.white,
+                                    borderRadius:
+                                        BorderRadius.all(Radius.circular(12)),
+                                    boxShadow: [
+                                      BoxShadow(
+                                        color: Colors.grey.shade400,
+                                        blurRadius: 3.0,
+                                        spreadRadius: 1.0,
+                                      )
+                                    ],
+                                  ),
+                                  child: Row(
+                                    children: [
+                                      IconButton(
+                                        onPressed: () {
+                                          if (itemCount == 1) {
+                                            // Navigator.of(context).pop();
+                                          } else {
+                                            setState(() {
+                                              itemCount--;
+                                              totalPrice = double.parse(
+                                                      totalPrice.toString()) -
+                                                  double.parse(
+                                                      itemPrice.toString());
+                                            });
+                                          }
+                                        },
+                                        icon: Icon(
+                                          Icons.remove,
+                                          color: itemCount == 1
+                                              ? Colors.deepOrange.shade100
+                                              : Colors.deepOrange,
+                                        ),
+                                      ),
+                                      SizedBox(
+                                        width: 15,
+                                      ),
+                                      Text(
                                         itemCount.toString(),
-                                      style:
-                                      TextStyle(fontWeight: FontWeight.w600),
-                                    ),
-                                    SizedBox(
-                                      width: 15,
-                                    ),
-                                    IconButton(
-                                      onPressed: () {
-                                        setState(() {
-                                          itemCount++; //_two => TextEditingController of 2nd TextField
-                                          totalPrice = double.parse(
-                                              totalPrice.toString()) +
-                                              double.parse(itemPrice.toString());
-                                        });
-                                      },
-                                      icon: Icon(
-                                        Icons.add,
-                                        color: Colors.deepOrange,
-                                      ),
-                                    ),
-                                  ],
-                                ),
-                              ),
-                            ],
-                          ),
-                        ],
-                      )),
-                ),
-                null !=addonModelList && addonModelList.length >0
-                    ? Divider(
-                    height: 15, thickness: 6, color: Colors.grey.shade300):Container(),
-                null !=addonModelList && addonModelList.length >0
-                    ? Padding(
-                  padding: const EdgeInsets.all(15.0),
-                  child:Column(
-                    crossAxisAlignment: CrossAxisAlignment.start,
-                    children: [
-                      Row(
-                        children: [
-                          Text("Add On's:",
-                              style: TextStyle(
-                                  fontWeight: FontWeight.w600,
-                                  fontSize: 16)),
-                          Text('(optional)',
-                              style: TextStyle(
-                                color: Colors.grey,
-                              ))
-                        ],
+                                        style: TextStyle(
+                                            fontWeight: FontWeight.w600),
+                                      ),
+                                      SizedBox(
+                                        width: 15,
+                                      ),
+                                      IconButton(
+                                        onPressed: () {
+
+                                          if(itemCount==0){
+                                            showModalBottomSheet(
+                                                shape: RoundedRectangleBorder(
+                                                  borderRadius: BorderRadius.only(
+                                                    topLeft: Radius.circular(14),
+                                                    topRight: Radius.circular(14),
+                                                  ),
+                                                ),
+                                                isScrollControlled: true,
+                                                context: context,
+                                                builder: (context) {
+                                                  return CartAddons(widget.itemModel,true);
+                                                }).then((value) {
+                                                  if(null!=value){
+                                                    itemCount=value;
+                                                    setState(() {
+
+                                                    });
+                                                  }
+                                            });
+                                          }else {
+                                            addDuplicateItem(context);
+                                          }
+
+
+                                          // setState(() {
+                                          //   itemCount++; //_two => TextEditingController of 2nd TextField
+                                          //   totalPrice = double.parse(
+                                          //           totalPrice.toString()) +
+                                          //       double.parse(
+                                          //           itemPrice.toString());
+                                          // });
+                                        },
+                                        icon: Icon(
+                                          Icons.add,
+                                          color: Colors.deepOrange,
+                                        ),
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                              ],
+                            ),
+                          ],
+                        )),
                       ),
-                      SizedBox(
-                        height: 10,
-                      ),
-                      Text('Choose items from the list',
-                          style: TextStyle(
-                              fontWeight: FontWeight.w600,
-                              color: Colors.grey,
-                              fontSize: 14)),
-                      SizedBox(
-                        height: 30,
-                      ),
-                      ListView.separated(
-                          separatorBuilder: (context, index) {
-                            return Divider();
-                          },
-                          physics: ScrollPhysics(),
-                          shrinkWrap: true,
-                          itemCount: addonModelList.length,
-                          itemBuilder: (context, index) {
-                            return Row(
-                              mainAxisAlignment:
-                              MainAxisAlignment.spaceBetween,
-                              children: [
-                                Expanded(
-                                  child: Text(
-                                      addonModelList[index].addonsSubTitleName.toString()),
-                                ),
-                                Row(
-                                  children: [
-                                    Text(
-                                        '(+ INR ${addonModelList[index].addonsSubTitlePrice})'),
-                                    Checkbox(
-                                      checkColor: Colors.white,
-                                      shape: RoundedRectangleBorder(
-                                        borderRadius:
-                                        BorderRadius.circular(3),
-                                      ),
-                                      activeColor:
-                                      Colors.deepOrangeAccent,
-                                      value: addonModelList[index].isSelected,
-                                      onChanged: (checked) {
-                                        setState(
-                                              () {
-                                                addonModelList[index].isSelected = checked;
-                                                if(addonModelList[index].isSelected == true){
-                                                  totalPrice = double.parse(
-                                                      totalPrice.toString()) +
-                                                      double.parse(addonModelList[index].addonsSubTitlePrice.toString());
-                                                } else {
-                                                  totalPrice = double.parse(
-                                                      totalPrice.toString()) -
-                                                      double.parse(addonModelList[index].addonsSubTitlePrice.toString());
-                                                }
-                                          },
-                                        );
-                                      },
-                                    ),
-                                  ],
-                                )
-                              ],
-                            );
-                          })
-                    ],
-                  ),
-                )
-                    : Container(),
-                Divider(
-                    height: 15, thickness: 6, color: Colors.grey.shade300),
-                Padding(
-                    padding: const EdgeInsets.all(15.0),
-                    child: Row(
-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                      children: [
-                        Container(
-                          child: Row(
-                            children: [
-                              Icon(Icons.messenger_outline),
-                              SizedBox(
-                                width: 10,
-                              ),
-                              Text(
-                                'Any special requests?',
-                                style: TextStyle(
-                                    fontSize: 15,
-                                    fontWeight: FontWeight.w600),
-                              ),
-                            ],
-                          ),
-                        ),
-                        GestureDetector(
-                          onTap: () => addNote(context),
-                          child: Text(
-                            'Add note',
-                            style: TextStyle(
-                                color: Colors.deepOrange,
-                                fontWeight: FontWeight.w600),
-                          ),
-                        )
-                      ],
-                    )),
-              ],
-            ),
-          ),
-          Padding(
-            padding: const EdgeInsets.all(20.0),
-            child: Container(
-              height: 60,
-              child: ElevatedButton(
-                onPressed: () {
-                  if(Provider.of<ApplicationProvider>(context, listen: false).cartModelList.isEmpty){
-                    widget.itemModel.addonsList=addonModelList.where((element) => element.isSelected == true).toList();
-
-                    Provider.of<ApplicationProvider>(context,
-                        listen: false)
-                        .updateProduct(widget.itemModel,
-                        null==widget.itemModel.enteredQty || null!=widget.itemModel.enteredQty && itemCount > widget.itemModel.enteredQty!,
-                        itemCount);
-                    Navigator.pop(context);
-                  }
-                 else if(Provider.of<ApplicationProvider>(context, listen: false).cartModelList.first.itemMerchantBranch ==
-                      Provider.of<ApplicationProvider>(context, listen: false).selectedRestModel.merchantBranchId){
-                    widget.itemModel.addonsList=addonModelList.where((element) => element.isSelected == true).toList();
-
-                    Provider.of<ApplicationProvider>(context,
-                        listen: false)
-                        .updateProduct(widget.itemModel,
-                        null==widget.itemModel.enteredQty || null!=widget.itemModel.enteredQty && itemCount > widget.itemModel.enteredQty!,
-                        itemCount);
-                    Navigator.pop(context);
-                  } else{
-                    showAlertDialog(context);
-                  }
-
-                },
-                child: Row(
-                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                  children: [
-                    Text(
-                      null!=widget.itemModel.enteredQty && widget.itemModel.enteredQty! > 0?'Update basket'
-                          :
-                      'Add to basket',
-                      style: TextStyle(
-                          fontSize: 16, fontWeight: FontWeight.w700),
-                    ),
-                    Text(
-                      'INR ' + totalPrice.toStringAsFixed(2),
-                      style: TextStyle(
-                          fontSize: 16, fontWeight: FontWeight.w700),
-                    )
-                  ],
+                      // null !=
+                      //             addOnList
+                      //                 .where((element) =>
+                      //                     null != element.addonsType &&
+                      //                     element.addonsType == 2)
+                      //                 .toList() &&
+                      //         addOnList
+                      //                 .where((element) =>
+                      //                     null != element.addonsType &&
+                      //                     element.addonsType == 2)
+                      //                 .toList()
+                      //                 .length >
+                      //             0
+                      //     ? Divider(
+                      //         height: 15,
+                      //         thickness: 6,
+                      //         color: Colors.grey.shade300)
+                      //     : Container(),
+                      // null !=
+                      //             addOnList
+                      //                 .where((element) =>
+                      //                     null != element.addonsType &&
+                      //                     element.addonsType == 2)
+                      //                 .toList() &&
+                      //         addOnList
+                      //                 .where((element) =>
+                      //                     null != element.addonsType &&
+                      //                     element.addonsType == 2)
+                      //                 .toList()
+                      //                 .length >
+                      //             0
+                      //     ? Padding(
+                      //         padding: const EdgeInsets.all(15.0),
+                      //         child: Column(
+                      //           crossAxisAlignment: CrossAxisAlignment.start,
+                      //           children: [
+                      //             Text(
+                      //                 null !=
+                      //                             addOnList
+                      //                                 .where((element) =>
+                      //                                     null !=
+                      //                                         element
+                      //                                             .addonsType &&
+                      //                                     element.addonsType ==
+                      //                                         2)
+                      //                                 .toList() &&
+                      //                         addOnList
+                      //                                 .where((element) =>
+                      //                                     null !=
+                      //                                         element
+                      //                                             .addonsType &&
+                      //                                     element.addonsType ==
+                      //                                         2)
+                      //                                 .toList()
+                      //                                 .length >
+                      //                             0
+                      //                     ? addOnList
+                      //                         .where((element) =>
+                      //                             null != element.addonsType &&
+                      //                             element.addonsType == 2)
+                      //                         .toList()
+                      //                         .first
+                      //                         .addonsName!
+                      //                     : "",
+                      //                 style: TextStyle(
+                      //                     fontWeight: FontWeight.w600,
+                      //                     fontSize: 16)),
+                      //             SizedBox(
+                      //               height: 5,
+                      //             ),
+                      //             null !=
+                      //                         addOnList
+                      //                             .where((element) =>
+                      //                                 null !=
+                      //                                     element.addonsType &&
+                      //                                 element.addonsType == 2)
+                      //                             .toList() &&
+                      //                     addOnList
+                      //                             .where((element) =>
+                      //                                 null !=
+                      //                                     element.addonsType &&
+                      //                                 element.addonsType == 2)
+                      //                             .toList()
+                      //                             .length >
+                      //                         0
+                      //                 ? !isMandatory
+                      //                     ? Text('Choose 1',
+                      //                         style: TextStyle(
+                      //                             fontWeight: FontWeight.w600,
+                      //                             color: Colors.grey,
+                      //                             fontSize: 14))
+                      //                     : Row(
+                      //                         children: [
+                      //                           Icon(
+                      //                             Icons.warning_amber_outlined,
+                      //                             color: Colors.red,
+                      //                           ),
+                      //                           SizedBox(
+                      //                             width: 2,
+                      //                           ),
+                      //                           Text("Choose 1",
+                      //                               style: TextStyle(
+                      //                                   fontWeight:
+                      //                                       FontWeight.w600,
+                      //                                   color: Colors.red,
+                      //                                   fontSize: 15))
+                      //                         ],
+                      //                       )
+                      //                 : Container(
+                      //                     height: 0,
+                      //                   ),
+                      //             ListView.builder(
+                      //                 physics: ScrollPhysics(),
+                      //                 shrinkWrap: true,
+                      //                 itemCount: addOnList.length,
+                      //                 itemBuilder: (context, index) {
+                      //                   return Visibility(
+                      //                     visible: null !=
+                      //                             addOnList[index].addonsType &&
+                      //                         addOnList[index].addonsType == 2,
+                      //                     child: Row(
+                      //                       mainAxisAlignment:
+                      //                           MainAxisAlignment.spaceBetween,
+                      //                       children: [
+                      //                         Expanded(
+                      //                           child: Text(addOnList[index]
+                      //                               .addonsSubTitleName
+                      //                               .toString()),
+                      //                         ),
+                      //                         Radio(
+                      //                           activeColor:
+                      //                               Colors.deepOrangeAccent,
+                      //                           value: null !=
+                      //                                       addOnList[index]
+                      //                                           .isSelected &&
+                      //                                   addOnList[index]
+                      //                                       .isSelected!
+                      //                               ? 1
+                      //                               : 0,
+                      //                           groupValue: 1,
+                      //                           onChanged: (value) {
+                      //                             addOnList[index].isSelected =
+                      //                                 true;
+                      //
+                      //                             if (lastAddonIndex != -1) {
+                      //                               addOnList[lastAddonIndex]
+                      //                                   .isSelected = false;
+                      //                             }
+                      //                             lastAddonIndex = index;
+                      //                             isMandatory = false;
+                      //                             setState(() {});
+                      //                           },
+                      //                         )
+                      //                       ],
+                      //                     ),
+                      //                   );
+                      //                 })
+                      //           ],
+                      //         ),
+                      //       )
+                      //     : Container(),
+                      // null != addOnList && addOnList.length > 0
+                      //     ? Divider(
+                      //         height: 1,
+                      //         thickness: 6,
+                      //         color: Colors.grey.shade300)
+                      //     : Container(),
+                      // null != addOnList && addOnList.length > 0
+                      //     ? Padding(
+                      //         padding: const EdgeInsets.all(15.0),
+                      //         child: Column(
+                      //           crossAxisAlignment: CrossAxisAlignment.start,
+                      //           children: [
+                      //             Row(
+                      //               children: [
+                      //                 Text(
+                      //                     null !=
+                      //                                 addOnList
+                      //                                     .where((element) =>
+                      //                                         null !=
+                      //                                             element
+                      //                                                 .addonsType &&
+                      //                                         element.addonsType ==
+                      //                                             1)
+                      //                                     .toList() &&
+                      //                             addOnList
+                      //                                     .where((element) =>
+                      //                                         null !=
+                      //                                             element
+                      //                                                 .addonsType &&
+                      //                                         element.addonsType ==
+                      //                                             1)
+                      //                                     .toList()
+                      //                                     .length >
+                      //                                 0
+                      //                         ? addOnList
+                      //                             .where((element) =>
+                      //                                 null !=
+                      //                                     element.addonsType &&
+                      //                                 element.addonsType == 1)
+                      //                             .toList()
+                      //                             .first
+                      //                             .addonsName!
+                      //                         : "",
+                      //                     style: TextStyle(
+                      //                         fontWeight: FontWeight.w600,
+                      //                         fontSize: 16)),
+                      //               ],
+                      //             ),
+                      //             SizedBox(
+                      //               height: 10,
+                      //             ),
+                      //             Text('Choose items from the list',
+                      //                 style: TextStyle(
+                      //                     fontWeight: FontWeight.w600,
+                      //                     color: Colors.grey,
+                      //                     fontSize: 14)),
+                      //             SizedBox(
+                      //               height: 20,
+                      //             ),
+                      //             ListView.separated(
+                      //                 separatorBuilder: (context, index) {
+                      //                   return Divider();
+                      //                 },
+                      //                 physics: ScrollPhysics(),
+                      //                 shrinkWrap: true,
+                      //                 itemCount: addOnList.length,
+                      //                 itemBuilder: (context, index) {
+                      //                   return Visibility(
+                      //                     visible: null !=
+                      //                             addOnList[index].addonsType &&
+                      //                         addOnList[index].addonsType == 1,
+                      //                     child: Row(
+                      //                       mainAxisAlignment:
+                      //                           MainAxisAlignment.spaceBetween,
+                      //                       children: [
+                      //                         Expanded(
+                      //                           child: Text(addOnList[index]
+                      //                               .addonsSubTitleName
+                      //                               .toString()),
+                      //                         ),
+                      //                         Row(
+                      //                           children: [
+                      //                             Text(
+                      //                                 '(+ INR ${addOnList[index].addonsSubTitlePrice})'),
+                      //                             Checkbox(
+                      //                               checkColor: Colors.white,
+                      //                               shape:
+                      //                                   RoundedRectangleBorder(
+                      //                                 borderRadius:
+                      //                                     BorderRadius.circular(
+                      //                                         3),
+                      //                               ),
+                      //                               activeColor:
+                      //                                   Colors.deepOrangeAccent,
+                      //                               value: addOnList[index]
+                      //                                   .isSelected,
+                      //                               onChanged: (checked) {
+                      //                                 setState(
+                      //                                   () {
+                      //                                     addOnList[index]
+                      //                                             .isSelected =
+                      //                                         checked;
+                      //                                     if (addOnList[index]
+                      //                                             .isSelected ==
+                      //                                         true) {
+                      //                                       totalPrice = double
+                      //                                               .parse(totalPrice
+                      //                                                   .toString()) +
+                      //                                           double.parse(addOnList[
+                      //                                                   index]
+                      //                                               .addonsSubTitlePrice
+                      //                                               .toString());
+                      //                                     } else {
+                      //                                       totalPrice = double
+                      //                                               .parse(totalPrice
+                      //                                                   .toString()) -
+                      //                                           double.parse(addOnList[
+                      //                                                   index]
+                      //                                               .addonsSubTitlePrice
+                      //                                               .toString());
+                      //                                     }
+                      //                                   },
+                      //                                 );
+                      //                               },
+                      //                             ),
+                      //                           ],
+                      //                         )
+                      //                       ],
+                      //                     ),
+                      //                   );
+                      //                 })
+                      //           ],
+                      //         ),
+                      //       )
+                          // : Container(),
+                      Divider(
+                          height: 15,
+                          thickness: 6,
+                          color: Colors.grey.shade300),
+                      Padding(
+                          padding: const EdgeInsets.all(15.0),
+                          child: Row(
+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                            children: [
+                              Container(
+                                child: Row(
+                                  children: [
+                                    Icon(Icons.messenger_outline),
+                                    SizedBox(
+                                      width: 10,
+                                    ),
+                                    Text(
+                                      'Any special requests?',
+                                      style: TextStyle(
+                                          fontSize: 15,
+                                          fontWeight: FontWeight.w600),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                              GestureDetector(
+                                onTap: () => addNote(context),
+                                child: Text(
+                                  'Add note',
+                                  style: TextStyle(
+                                      color: Colors.deepOrange,
+                                      fontWeight: FontWeight.w600),
+                                ),
+                              )
+                            ],
+                          )),
+                    ],
+                  ),
                 ),
-                style: ElevatedButton.styleFrom(
-                    primary: Colors.deepOrange,
-                    elevation: 0,
-                    shape: RoundedRectangleBorder(
-                      borderRadius: BorderRadius.circular(12.0),
-                      // side: BorderSide(color: Colors.grey)
-                    )),
-              ),
-            ),
-          )
-        ],
-      ),
-    );
+                // Padding(
+                //   padding: const EdgeInsets.all(20.0),
+                //   child: Container(
+                //     height: 60,
+                //     child: ElevatedButton(
+                //       onPressed: () {
+                //         if (Provider.of<ApplicationProvider>(context,
+                //                     listen: false)
+                //                 .cartModelList
+                //                 .isEmpty ||
+                //             Provider.of<ApplicationProvider>(context,
+                //                         listen: false)
+                //                     .cartModelList
+                //                     .first
+                //                     .itemMerchantBranch ==
+                //                 Provider.of<ApplicationProvider>(context,
+                //                         listen: false)
+                //                     .selectedRestModel
+                //                     .merchantBranchId) {
+                //           if (null != addOnList && addOnList.length > 0) {
+                //             List<Addons> addedMandatoryAddonList = [];
+                //             addedMandatoryAddonList = addOnList
+                //                 .where((element) =>
+                //                     null != element.addonsType &&
+                //                     element.addonsType == 2)
+                //                 .toList();
+                //             if (null != addedMandatoryAddonList &&
+                //                 addedMandatoryAddonList.length > 0 &&
+                //                 lastAddonIndex == -1) {
+                //               isMandatory = true;
+                //               setState(() {});
+                //             } else {
+                //               widget.itemModel.addonsList = addOnList
+                //                   .where(
+                //                       (element) => element.isSelected == true)
+                //                   .toList();
+                //               Provider.of<ApplicationProvider>(context,
+                //                       listen: false)
+                //                   .updateProduct(
+                //                       widget.itemModel,
+                //                       null == widget.itemModel.enteredQty ||
+                //                           null != widget.itemModel.enteredQty &&
+                //                               itemCount >
+                //                                   widget.itemModel.enteredQty!,
+                //                       itemCount);
+                //               Navigator.pop(context);
+                //               isMandatory = false;
+                //               setState(() {});
+                //             }
+                //           } else {
+                //             widget.itemModel.addonsList = addOnList
+                //                 .where((element) => element.isSelected == true)
+                //                 .toList();
+                //             Provider.of<ApplicationProvider>(context,
+                //                     listen: false)
+                //                 .updateProduct(
+                //                     widget.itemModel,
+                //                     null == widget.itemModel.enteredQty ||
+                //                         null != widget.itemModel.enteredQty &&
+                //                             itemCount >
+                //                                 widget.itemModel.enteredQty!,
+                //                     itemCount);
+                //             Navigator.pop(context);
+                //           }
+                //         } else {
+                //           showAlertDialog(context);
+                //         }
+                //       },
+                //       child: Row(
+                //         mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                //         children: [
+                //           Text("Total amount",
+                //             // null != widget.itemModel.enteredQty &&
+                //             //         widget.itemModel.enteredQty! > 0
+                //             //     ? 'Update basket'
+                //             //     : 'Add to basket',
+                //             style: TextStyle(
+                //                 fontSize: 16, fontWeight: FontWeight.w700),
+                //           ),
+                //           Text(
+                //             'INR ' + totalPrice.toStringAsFixed(2),
+                //             style: TextStyle(
+                //                 fontSize: 16, fontWeight: FontWeight.w700),
+                //           )
+                //         ],
+                //       ),
+                //       style: ElevatedButton.styleFrom(
+                //           primary: Colors.deepOrange,
+                //           elevation: 0,
+                //           shape: RoundedRectangleBorder(
+                //             borderRadius: BorderRadius.circular(12.0),
+                //             // side: BorderSide(color: Colors.grey)
+                //           )),
+                //     ),
+                //   ),
+                // )
+              ],
+            ),
+          );
   }
 
   void addNote(context) {
@@ -404,7 +695,7 @@
         context: context,
         builder: (context) {
           TextEditingController itemNoteController =
-          new TextEditingController();
+              new TextEditingController();
           return Column(
             mainAxisSize: MainAxisSize.min,
             crossAxisAlignment: CrossAxisAlignment.start,
@@ -452,7 +743,7 @@
                     child: Text(
                       'Done',
                       style:
-                      TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
+                          TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                       textAlign: TextAlign.end,
                     ),
                   ))
@@ -460,117 +751,326 @@
           );
         });
   }
+
   getAddons() async {
-    isLoading =true;
-    setState(() {
-
-    });
+    isLoading = true;
+    setState(() {});
     var map = new Map<String, dynamic>();
-    map['item_id'] =
-       widget.itemModel.itemId!;
+    map['item_id'] = widget.itemModel.itemId!;
     var response =
-    await http.post(Uri.parse(ApiData.GET_ITEM_ADDONS), body: map);
+        await http.post(Uri.parse(ApiData.GET_ITEM_ADDONS), body: map);
     var json = convert.jsonDecode(response.body);
     List dataList = json['addons'];
     if (null != dataList && dataList.length > 0) {
-      addonModelList = dataList
+      // List<Addons> addonList = [];
+
+      addOnList = dataList
           .map((spacecraft) => new Addons.fromJson(spacecraft))
           .toList();
+      // for (Addons addon in addonList){
+      //
+      //   if(null!=addon.addonsType &&
+      //       addon.addonsType==2){
+      //     mandatoryAddonList.add(addon);
+      //   }else{
+      //     optionalAddonList.add(addon);
+      //   }
+      // }
+      // if(null!=mandatoryAddonList && mandatoryAddonList.length>0) {
+      //   mandatoryAddonList[0].isSelected = true;
+      // }
 
-        if(null!=widget.itemModel.addonsList && widget.itemModel.addonsList!.length>0){
-          for(Addons  addonModel in widget.itemModel.addonsList!){
-           if(addonModel.isSelected!){
-             addonModelList.where((element) => element.itemAddonsSubtitleTblid
-                 == addonModel.itemAddonsSubtitleTblid).first.isSelected = true;
-             totalPrice = double.parse(
-                 totalPrice.toString()) +  addonModel.addonsSubTitlePrice!;
-             setState(() {
-
-             });
-           }
+      if (null != widget.itemModel.addonsList &&
+          widget.itemModel.addonsList!.length > 0) {
+        for (Addons addonModel in widget.itemModel.addonsList!) {
+          if (addonModel.isSelected!) {
+            if (null != addonModel.addonsType && addonModel.addonsType == 2) {
+              lastAddonIndex = addOnList.indexWhere((element) =>
+                  element.itemAddonsSubtitleTblid ==
+                  addonModel.itemAddonsSubtitleTblid);
+              if (lastAddonIndex != -1) {
+                addOnList[lastAddonIndex].isSelected = true;
+              }
+            } else {
+              addOnList
+                  .where((element) =>
+                      element.itemAddonsSubtitleTblid ==
+                      addonModel.itemAddonsSubtitleTblid)
+                  .first
+                  .isSelected = true;
+            }
+            totalPrice = double.parse(totalPrice.toString()) +
+                addonModel.addonsSubTitlePrice!;
+            setState(() {});
           }
         }
-      isLoading =false;
-      setState(() {
-
-      });
+      }
+
+      isLoading = false;
+      setState(() {});
       // Provider.of<ApplicationProvider>(context, listen: false)
       //     .setItemAddons(addonModelList);
     }
   }
+
   void showAlertDialog(BuildContext context) {
-
-      // set up the buttons
-      Widget cancelButton = Container(
-
-        decoration: BoxDecoration(
-            color: Colors.deepOrange.shade50,
-            borderRadius: BorderRadius.circular(14),
-        ),
-        child: TextButton(
-          child: Text("No",
-              style: TextStyle(
-                  color: Colors.deepOrange,
-                  fontSize: 16,
-                  fontWeight: FontWeight.w600
-              )),
-          onPressed:  () {
-            Navigator.pop(context);
-          },
-        ),
-      );
-      Widget continueButton = Container(
-        width: Helper.getScreenWidth(context)*.3,
-        decoration: BoxDecoration(
+    // set up the buttons
+    Widget cancelButton = Container(
+      decoration: BoxDecoration(
+        color: Colors.deepOrange.shade50,
+        borderRadius: BorderRadius.circular(14),
+      ),
+      child: TextButton(
+        child: Text("No",
+            style: TextStyle(
+                color: Colors.deepOrange,
+                fontSize: 16,
+                fontWeight: FontWeight.w600)),
+        onPressed: () {
+          Navigator.pop(context);
+        },
+      ),
+    );
+    Widget continueButton = Container(
+      width: Helper.getScreenWidth(context) * .3,
+      decoration: BoxDecoration(
           color: Colors.deepOrange,
-            borderRadius: BorderRadius.circular(14),
-            border: Border.all(color: Colors.deepOrange,width: 1)
-        ),
-        child: TextButton(
-          child: Text("Replace",
+          borderRadius: BorderRadius.circular(14),
+          border: Border.all(color: Colors.deepOrange, width: 1)),
+      child: TextButton(
+        child: Text(
+          "Replace",
           style: TextStyle(
-            color: Colors.white,
-            fontSize: 16,
-            fontWeight: FontWeight.w600
-          ),),
-          onPressed:  () {
-            Provider.of<ApplicationProvider>(context, listen: false).cartModelList.clear();
-            widget.itemModel.addonsList=addonModelList.where((element) => element.isSelected == true).toList();
+              color: Colors.white, fontSize: 16, fontWeight: FontWeight.w600),
+        ),
+        onPressed: () {
+          Provider.of<ApplicationProvider>(context, listen: false)
+              .cartModelList
+              .clear();
+          widget.itemModel.addonsList =
+              addOnList.where((element) => element.isSelected == true).toList();
 
-            Provider.of<ApplicationProvider>(context,
-                listen: false)
-                .updateProduct(widget.itemModel,
-                null==widget.itemModel.enteredQty || null!=widget.itemModel.enteredQty && itemCount > widget.itemModel.enteredQty!,
-                itemCount);
-            Navigator.pop(context);
-            Navigator.pop(context);
-          },
-        ),
-      );
+          Provider.of<ApplicationProvider>(context, listen: false)
+              .updateProduct(
+                  widget.itemModel,
+                  null == widget.itemModel.enteredQty ||
+                      null != widget.itemModel.enteredQty &&
+                          itemCount > widget.itemModel.enteredQty!,
+                  itemCount);
+          Navigator.pop(context);
+          Navigator.pop(context);
+        },
+      ),
+    );
 
-      // set up the AlertDialog
-      AlertDialog alert = AlertDialog(
-        title: Text("Replace cart item?",
+    // set up the AlertDialog
+    AlertDialog alert = AlertDialog(
+      title: Text(
+        "Replace cart item?",
         style: TextStyle(
           color: Colors.black,
           fontWeight: FontWeight.w600,
-        ),),
-        content: Text("Your cart contains dishes from another restaurant. Do you wish to remove those items from cart?",
-        style:TextStyle(
-          height: 1.3
-        )),
-        actions: [
-          cancelButton,
-          continueButton,
-        ],
-      );
+        ),
+      ),
+      content: Text(
+          "Your cart contains dishes from another restaurant. Do you wish to remove those items from cart?",
+          style: TextStyle(height: 1.3)),
+      actions: [
+        cancelButton,
+        continueButton,
+      ],
+    );
 
-      // show the dialog
-      showDialog(
-        context: context,
-        builder: (BuildContext context) {
-          return alert;
-        },
-      );
-    }
+    // show the dialog
+    showDialog(
+      context: context,
+      builder: (BuildContext context) {
+        return alert;
+      },
+    );
+  }
+
+  void addDuplicateItem(context) {
+    showModalBottomSheet(
+        shape: RoundedRectangleBorder(
+          borderRadius: BorderRadius.only(
+            topLeft: Radius.circular(14),
+            topRight: Radius.circular(14),
+          ),
+        ),
+        isScrollControlled: true,
+        context: context,
+        builder: (context) {
+          return Padding(
+              padding: const EdgeInsets.all(8.0),
+              child: Column(
+                crossAxisAlignment: CrossAxisAlignment.start,
+                mainAxisSize: MainAxisSize.min,
+                children: [
+                  ListTile(
+                    leading: widget.itemModel.itemVegNonveg == "1"
+                        ? Image.asset(
+                            Helper.getAssetName("veg.png", "virtual"),
+                            height: 15,
+                          )
+                        : Image.asset(
+                            Helper.getAssetName("non-veg.png", "virtual"),
+                            height: 15,
+                          ),
+                    minLeadingWidth: 2,
+                    title: Text(
+                      widget.itemModel.itemName.toString(),
+                      style: TextStyle(
+                          fontSize: 20,
+                          color: Colors.black,
+                          fontWeight: FontWeight.w600),
+                    ),
+                    subtitle: Text("₹${widget.itemModel.itemPrice.toString()}"),
+                    trailing: InkWell(
+                        onTap: () {
+                          Navigator.pop(context);
+                        },
+                        child: Icon(Icons.close)),
+                  ),
+                  Divider(
+                    color: Colors.grey[300],
+                    thickness: 1,
+                  ),
+                  Row(
+                    children: [
+                      Expanded(
+                        child: Container(
+                          height: 50,
+                          margin: EdgeInsets.only(left: 15, right: 10),
+                          child: ElevatedButton(
+                            onPressed: () {
+                              Navigator.of(context).pop();
+                              showModalBottomSheet(
+                                  shape: RoundedRectangleBorder(
+                                    borderRadius: BorderRadius.only(
+                                      topLeft: Radius.circular(14),
+                                      topRight: Radius.circular(14),
+                                    ),
+                                  ),
+                                  isScrollControlled: true,
+                                  context: context,
+                                  builder: (context) {
+                                    return CartAddons(widget.itemModel,true);
+                                  });
+                            },
+                            child: Text(
+                              "I'll Choose",
+                              style: TextStyle(
+                                  fontSize: 16,
+                                  color: Colors.deepOrange,
+                                  fontWeight: FontWeight.bold),
+                            ),
+                            style: ElevatedButton.styleFrom(
+                              primary: Colors.deepOrange.shade50,
+                              shape: RoundedRectangleBorder(
+                                borderRadius: BorderRadius.circular(12),
+                              ),
+                            ),
+                          ),
+                        ),
+                      ),
+                      Expanded(
+                        child: Container(
+                          height: 50,
+                          margin: EdgeInsets.only(right: 15, left: 10),
+                          child: ElevatedButton(
+                            onPressed: () {
+                              itemCount++;
+                              // widget.itemModel.enteredQty = itemCount;
+                              if (Provider.of<ApplicationProvider>(context,
+                                          listen: false)
+                                      .cartModelList
+                                      .isEmpty ||
+                                  Provider.of<ApplicationProvider>(context,
+                                              listen: false)
+                                          .cartModelList
+                                          .first
+                                          .itemMerchantBranch ==
+                                      Provider.of<ApplicationProvider>(context,
+                                              listen: false)
+                                          .selectedRestModel
+                                          .merchantBranchId) {
+                                if (null != addOnList && addOnList.length > 0) {
+                                  List<Addons> addedMandatoryAddonList = [];
+                                  addedMandatoryAddonList = addOnList
+                                      .where((element) =>
+                                          null != element.addonsType &&
+                                          element.addonsType == 2)
+                                      .toList();
+                                  // if (null != addedMandatoryAddonList &&
+                                  //     addedMandatoryAddonList.length > 0 &&
+                                  //     lastAddonIndex == -1) {
+                                  //   isMandatory = true;
+                                  //   setState(() {});
+                                  // } else {
+                                    widget.itemModel.addonsList = addOnList
+                                        .where((element) =>
+                                            element.isSelected == true)
+                                        .toList();
+                                    Provider.of<ApplicationProvider>(context,
+                                            listen: false)
+                                        .updateProduct(
+                                            widget.itemModel,
+                                            null ==
+                                                    widget
+                                                        .itemModel.enteredQty ||
+                                                null !=
+                                                        widget.itemModel
+                                                            .enteredQty &&
+                                                    itemCount >
+                                                        widget.itemModel
+                                                            .enteredQty!,
+                                            itemCount);
+                                    Navigator.pop(context);
+                                    isMandatory = false;
+                                    setState(() {});
+                                  // }
+                                } else {
+                                  widget.itemModel.addonsList = addOnList
+                                      .where((element) =>
+                                          element.isSelected == true)
+                                      .toList();
+                                  Provider.of<ApplicationProvider>(context,
+                                          listen: false)
+                                      .updateProduct(
+                                          widget.itemModel,
+                                          null == widget.itemModel.enteredQty ||
+                                              null !=
+                                                      widget.itemModel
+                                                          .enteredQty &&
+                                                  itemCount >
+                                                      widget.itemModel
+                                                          .enteredQty!,
+                                          itemCount);
+                                  Navigator.pop(context);
+                                }
+                              } else {
+                                showAlertDialog(context);
+                              }
+                            },
+                            child: Text(
+                              "Repeat Last",
+                              style: TextStyle(
+                                  fontSize: 16, fontWeight: FontWeight.w600),
+                            ),
+                            style: ElevatedButton.styleFrom(
+                              primary: Colors.deepOrange,
+                              shape: RoundedRectangleBorder(
+                                borderRadius: BorderRadius.circular(12),
+                              ),
+                            ),
+                          ),
+                        ),
+                      )
+                    ],
+                  )
+                ],
+              ));
+        });
+  }
 }
Index: lib/screens/home/sections/categoryCard.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/home/sections/categoryCard.dart b/lib/screens/home/sections/categoryCard.dart
--- a/lib/screens/home/sections/categoryCard.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/home/sections/categoryCard.dart	(date 1651908302390)
@@ -49,7 +49,8 @@
                   ClipRRect(
                     borderRadius: BorderRadius.circular(14.0),
                     child: Image.network(widget.cardImg!,
-                      fit:BoxFit.fill,
+                      width: double.infinity,
+                      fit:BoxFit.cover,
                       height: double.infinity,
                       loadingBuilder: (BuildContext context, Widget child,
                           ImageChunkEvent? loadingProgress) {
Index: pubspec.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.lock b/pubspec.lock
--- a/pubspec.lock	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/pubspec.lock	(date 1651938938860)
@@ -268,13 +268,20 @@
       url: "https://pub.dartlang.org"
     source: hosted
     version: "4.0.0"
+  intl:
+    dependency: "direct main"
+    description:
+      name: intl
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.17.0"
   js:
     dependency: transitive
     description:
       name: js
       url: "https://pub.dartlang.org"
     source: hosted
-    version: "0.6.4"
+    version: "0.6.3"
   location:
     dependency: "direct main"
     description:
@@ -337,7 +344,7 @@
       name: path
       url: "https://pub.dartlang.org"
     source: hosted
-    version: "1.8.1"
+    version: "1.8.0"
   path_drawing:
     dependency: transitive
     description:
@@ -415,6 +422,20 @@
       url: "https://pub.dartlang.org"
     source: hosted
     version: "6.0.2"
+  rect_getter:
+    dependency: transitive
+    description:
+      name: rect_getter
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "1.1.0"
+  scroll_to_index:
+    dependency: transitive
+    description:
+      name: scroll_to_index
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.1.1"
   shared_preferences:
     dependency: "direct main"
     description:
@@ -531,7 +552,7 @@
       name: test_api
       url: "https://pub.dartlang.org"
     source: hosted
-    version: "0.4.9"
+    version: "0.4.8"
   timelines:
     dependency: "direct main"
     description:
@@ -602,6 +623,13 @@
       url: "https://pub.dartlang.org"
     source: hosted
     version: "2.1.1"
+  vertical_scrollable_tabview:
+    dependency: "direct main"
+    description:
+      name: vertical_scrollable_tabview
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.0.7"
   video_player:
     dependency: "direct main"
     description:
Index: lib/screens/home/sections/groceryCard.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/home/sections/groceryCard.dart b/lib/screens/home/sections/groceryCard.dart
--- a/lib/screens/home/sections/groceryCard.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/home/sections/groceryCard.dart	(date 1651901660111)
@@ -144,7 +144,8 @@
               Container(
                   child:  Row(
                     children: [
-                      Icon(Icons.tag_faces_outlined),
+                      Icon(widget.rating == "No reviews yet"||widget.rating == "0" ?Icons.sentiment_dissatisfied:
+                      Icons.tag_faces_outlined),
                       SizedBox(width: 5,),
                       Text(widget.rating!,
                         style: TextStyle(
Index: lib/Models/PopularRestModel.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/Models/PopularRestModel.dart b/lib/Models/PopularRestModel.dart
--- a/lib/Models/PopularRestModel.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/Models/PopularRestModel.dart	(date 1651902215923)
@@ -59,6 +59,7 @@
     this.merchantPackChargeType,
     this.merchantPackCharge,
     this.distance,
+    this.merchantBranchCoverImage
   });
 
   String? cuisines;
@@ -87,6 +88,7 @@
   String? merchantBranchMinWalletAmnt;
   String? merchantBranchPaymnetMode;
   String? merchantBranchImage;
+  String? merchantBranchCoverImage;
   String? merchantBranchOrderTime;
   String? merchantBranchTaxOn;
   String? merchantBranchTaxPercentage;
@@ -111,6 +113,7 @@
   String? merchantPackCharge;
   String? distance;
 
+
   factory PopularRestModel.fromJson(Map<String, dynamic> json) => PopularRestModel(
     cuisines: json["cuisines"] == null ? null : json["cuisines"],
     reviewAvgRating: json["review_avg_rating"],
@@ -138,6 +141,7 @@
     merchantBranchMinWalletAmnt: json["merchant_branch_min_wallet_amnt"] == null ? null : json["merchant_branch_min_wallet_amnt"],
     merchantBranchPaymnetMode: json["merchant_branch_paymnet_mode"] == null ? null : json["merchant_branch_paymnet_mode"],
     merchantBranchImage: json["merchant_branch_image"] == null ? null : json["merchant_branch_image"],
+    merchantBranchCoverImage: json["merchant_branch_cover_image"] == null ? null : json["merchant_branch_cover_image"],
     merchantBranchOrderTime: json["merchant_branch_order_time"] == null ? null : json["merchant_branch_order_time"],
     merchantBranchTaxOn: json["merchant_branch_tax_on"] == null ? null : json["merchant_branch_tax_on"],
     merchantBranchTaxPercentage: json["merchant_branch_tax_percentage"] == null ? null : json["merchant_branch_tax_percentage"],
@@ -190,6 +194,7 @@
     "merchant_branch_min_wallet_amnt": merchantBranchMinWalletAmnt == null ? null : merchantBranchMinWalletAmnt,
     "merchant_branch_paymnet_mode": merchantBranchPaymnetMode == null ? null : merchantBranchPaymnetMode,
     "merchant_branch_image": merchantBranchImage == null ? null : merchantBranchImage,
+    "merchant_branch_cover_image" : merchantBranchCoverImage == null ? null : merchantBranchCoverImage,
     "merchant_branch_order_time": merchantBranchOrderTime == null ? null : merchantBranchOrderTime,
     "merchant_branch_tax_on": merchantBranchTaxOn == null ? null : merchantBranchTaxOn,
     "merchant_branch_tax_percentage": merchantBranchTaxPercentage == null ? null : merchantBranchTaxPercentage,
Index: lib/blocs/application_bloc.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/blocs/application_bloc.dart b/lib/blocs/application_bloc.dart
--- a/lib/blocs/application_bloc.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/blocs/application_bloc.dart	(date 1652066449101)
@@ -12,6 +12,8 @@
 import 'package:http/http.dart' as http;
 import 'dart:convert';
 
+import 'package:intl/intl.dart';
+
 class ApplicationProvider with ChangeNotifier {
   final geoLocatorService = GeolocatorService();
   final placesService = PlacesService();
@@ -20,20 +22,26 @@
   List<PlaceSearch>? searchResults;
   String? currentAddress;
   List<Item> cartModelList = [];
+
   List<Item> filteredLoadedProductModelList = [];
-  List<Item> searchItemList=[];
+  List<Item> searchItemList = [];
   SingleRestModel selectedRestModel = new SingleRestModel();
   AddressModel selectedAddressModel = new AddressModel();
   List<AddonModel> addonModelList = [];
-  int? selectedCategoryIndex;
+  int? selectedCategoryId;
   String? catName;
   List<Category> categoryList = [];
-  double? totalCartPrice;
+  double? totalWithoutTax;
   double? itemTotal;
   double deliveryFee = 0;
-  String orderTime ="";
+  String orderTime = "";
   bool isItemLoading = false;
   String? currentOrderId = "";
+  double totalAmt = 0;
+  double toPayAmt = 0;
+  int deliveryBoyTip = 0;
+  var taxData = {};
+  double setTexPercentage = 0;
   ApplicationProvider() {
     setCurrentLocation();
   }
@@ -78,18 +86,22 @@
   setAddressModel(AddressModel addressModel) async {
     this.selectedAddressModel = addressModel;
   }
+
   setOrderId(String orderId) async {
     this.currentOrderId = orderId;
   }
+
   clearSearch() async {
     this.searchItemList = [];
     notifyListeners();
   }
 
   setSearchItemList(String val) async {
-  searchItemList = selectedRestModel.items!.where((element) =>
-      element.itemName!.toLowerCase().contains(val.toLowerCase())).toList();
-  notifyListeners();
+    searchItemList = selectedRestModel.items!
+        .where((element) =>
+            element.itemName!.toLowerCase().contains(val.toLowerCase()))
+        .toList();
+    notifyListeners();
   }
 
   clearData() async {
@@ -112,21 +124,20 @@
     notifyListeners();
   }
 
-  setTotalCartPrice(double totalAmt) async {
-    totalCartPrice = totalAmt;
-  }
   setItemTotal(double itemTotal) async {
-
     this.itemTotal = itemTotal;
-    if(null!=selectedAddressModel.addressId && selectedAddressModel.addressId!.isNotEmpty){
+    if (null != selectedAddressModel.addressId &&
+        selectedAddressModel.addressId!.isNotEmpty) {
       getDeliveryCharge(itemTotal);
     }
 
     // notifyListeners();
-
+  }
 
+  clearDeliveryFee() {
+    this.deliveryFee = 0;
+    notifyListeners();
   }
-
 
   setCurrentLocation() async {
     currentLocation = await geoLocatorService.getCurrentLocation();
@@ -146,7 +157,7 @@
   setCurrentRestModel(SingleRestModel restModel) async {
     this.selectedRestModel = restModel;
     this.filteredLoadedProductModelList = [];
-    this.selectedCategoryIndex = 0;
+    this.selectedCategoryId = 0;
 
     notifyListeners();
   }
@@ -156,9 +167,8 @@
     notifyListeners();
   }
 
-
-  addProductData(List<Item> productList, bool isFilteredList, int position) {
-    selectedCategoryIndex = position;
+  addProductData(List<Item> productList, bool isFilteredList) {
+    // selectedCategoryId = categoryId;
 
     // if (!isFilteredList) {
     //   allItemsList = productList;
@@ -172,8 +182,9 @@
     notifyListeners();
   }
 
-  currentSelectedCategory(int selectedIndex) {
-    selectedCategoryIndex = selectedIndex;
+  currentSelectedCategory(int categoryId) {
+    print(categoryId.toString() + "zzzzzzzzzzzzzzzzzzzzzzzzzz");
+    selectedCategoryId = categoryId;
     notifyListeners();
   }
 
@@ -197,74 +208,116 @@
   }
 
   updateProduct(Item product, bool isIncrement, int enteredQty) {
-    int index = filteredLoadedProductModelList
+    int filteredItemIndex = filteredLoadedProductModelList
         .indexWhere((element) => element.itemId == product.itemId);
-
-    if (index > 0) {
+    int cartIndex = null != product.tempId && product.tempId!.isNotEmpty
+        ? cartModelList
+            .indexWhere((element) => element.tempId == product.tempId)
+        : -1;
+    if (filteredItemIndex != -1) {
       if (isIncrement) {
-        // filteredLoadedProductModelList[index].enteredQty = enteredQty;
+        // filteredLoadedProductModelList[cartIndex].enteredQty = enteredQty;
         if (null != cartModelList && cartModelList.length > 0) {
-          if (!cartModelList.contains(product)) {
-            filteredLoadedProductModelList[index] =
-                calculateValue(product, enteredQty);
-            cartModelList.add(filteredLoadedProductModelList[index]);
+          if (cartIndex == -1) {
+            product.tempId = getTempId();
+            product = calculateValue(product, enteredQty);
+
+            cartModelList.add(product);
           } else {
-            int cartIndex = cartModelList.indexOf(product);
             cartModelList[cartIndex] = calculateValue(product, enteredQty);
           }
         } else {
-          filteredLoadedProductModelList[index] =
-              calculateValue(product, enteredQty);
-          cartModelList.add(filteredLoadedProductModelList[index]);
+          product.tempId = getTempId();
+          product = calculateValue(product, enteredQty);
+          cartModelList.add(product);
         }
       } else {
-        int cartIndex = cartModelList.indexOf(product);
-
         if (null != product.enteredQty && product.enteredQty! > 1) {
-          filteredLoadedProductModelList[index] =
-              calculateValue(product, enteredQty);
+          // filteredLoadedProductModelList[filteredItemIndex] =
+          //     calculateValue(product, enteredQty);
 
           cartModelList[cartIndex] = calculateValue(product, enteredQty);
         } else {
-          cartModelList.remove(product);
+          filteredLoadedProductModelList[filteredItemIndex].addonsList = [];
+          cartModelList.removeAt(cartIndex);
 
-          filteredLoadedProductModelList[index] =
-              calculateValue(product, enteredQty);
+          // filteredLoadedProductModelList[filteredItemIndex] =
+          //     calculateValue(product, enteredQty);
         }
       }
     } else {
       if (isIncrement) {
         if (null != cartModelList && cartModelList.length > 0) {
-          if (!cartModelList.contains(product)) {
+          if (cartIndex == -1) {
+            product.tempId = getTempId();
             product = calculateValue(product, enteredQty);
             cartModelList.add(product);
           } else {
-            int cartIndex = cartModelList.indexOf(product);
             cartModelList[cartIndex] = calculateValue(product, enteredQty);
           }
         } else {
+          product.tempId = getTempId();
           product = calculateValue(product, enteredQty);
           cartModelList.add(product);
         }
       } else {
-        int cartIndex = cartModelList.indexOf(product);
-
         if (null != product.enteredQty && product.enteredQty! > 1) {
           cartModelList[cartIndex] = calculateValue(product, enteredQty);
         } else {
-          cartModelList.remove(product);
+          cartModelList.removeAt(cartIndex);
         }
       }
     }
     int allItemIndex = selectedRestModel.items!
         .indexWhere((element) => element.itemId == product.itemId);
-    if (allItemIndex > -1) {
-      selectedRestModel.items![allItemIndex] =
-          calculateValue(product, enteredQty);
-    }
+    List<Item> items = cartModelList
+        .where((element) => element.tempId == product.tempId)
+        .toList();
+    // int qty=0;
+    // if(null!=items && items.length>0){
+    //   for(Item item in items){
+    //     qty=qty+item.enteredQty!;
+    //   }
+    // }
+    // if (allItemIndex > -1) {
+    // filteredLoadedProductModelList[filteredItemIndex] =
+    //     calculateValue(product, enteredQty);
+    selectedRestModel.items![allItemIndex] =
+        calculateValue(product, enteredQty);
+
+    // }
+    calculateTotal();
     notifyListeners();
   }
 
+  static String getTempId() {
+    String date = "";
+
+    DateTime lastUpdateTime = DateTime.now();
+
+    date = (lastUpdateTime.day.toString().length == 1
+            ? "0" + lastUpdateTime.day.toString()
+            : lastUpdateTime.day.toString()) +
+        (lastUpdateTime.hour.toString().length == 1
+            ? "0" + lastUpdateTime.hour.toString()
+            : lastUpdateTime.hour.toString()) +
+        (lastUpdateTime.minute.toString().length == 1
+            ? "0" + lastUpdateTime.minute.toString()
+            : lastUpdateTime.minute.toString()) +
+        (lastUpdateTime.second.toString().length == 1
+            ? "0" + lastUpdateTime.second.toString()
+            : lastUpdateTime.second.toString()) +
+        (lastUpdateTime.millisecond.toString().length == 0
+            ? "000"
+            : lastUpdateTime.millisecond.toString().length == 1
+                ? "00" + lastUpdateTime.millisecond.toString()
+                : lastUpdateTime.millisecond.toString().length == 2
+                    ? "0" + lastUpdateTime.millisecond.toString()
+                    : lastUpdateTime.millisecond.toString());
+
+    return date;
+  }
+
   Item calculateValue(Item product, int enteredQty) {
     double totalAmt = 0;
     product.enteredQty = enteredQty;
@@ -282,19 +335,41 @@
 
   getDeliveryCharge(double total) async {
     var map = new Map<String, dynamic>();
-    map['merchant_branch_id'] = selectedRestModel
-        .merchantBranchId
-        .toString();
-    map['lat'] =  selectedAddressModel.addressLat;
+    map['merchant_branch_id'] = selectedRestModel.merchantBranchId.toString();
+    map['lat'] = selectedAddressModel.addressLat;
     map['lng'] = selectedAddressModel.addressLng;
     map['order_amt'] = total.toString();
     var response =
-    await http.post(Uri.parse(ApiData.GET_DELIVERY_CHARGE), body: map);
+        await http.post(Uri.parse(ApiData.GET_DELIVERY_CHARGE), body: map);
     var jsonData = json.decode(response.body);
-    deliveryFee = null!=jsonData['delivery_fee']? double.parse(jsonData['delivery_fee'].toString()):0;
+    deliveryFee = null != jsonData['delivery_fee']
+        ? double.parse(jsonData['delivery_fee'].toString())
+        : 0;
+    print(deliveryFee.toString() + "del");
     orderTime = jsonData['order_time'];
 
     notifyListeners();
-
+  }
+
+  setTipValue(int tip) {
+    this.deliveryBoyTip = tip;
+    notifyListeners();
+  }
+
+  setTaxPercentage(double tax) {
+    this.setTexPercentage = tax;
+    notifyListeners();
+  }
+
+  calculateTotal() async {
+    totalAmt = 0;
+    for (Item item in cartModelList) {
+      totalAmt = totalAmt + item.totalPrice!;
+    }
+    this.setItemTotal(totalAmt);
+    taxData = calculateTax(setTexPercentage, totalAmt, false);
+    toPayAmt = taxData['totalAmtWithTax'] + deliveryBoyTip + deliveryFee;
+    totalWithoutTax = totalAmt;
+    notifyListeners();
   }
 }
Index: lib/Models/SingleRestModel.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/Models/SingleRestModel.dart b/lib/Models/SingleRestModel.dart
--- a/lib/Models/SingleRestModel.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/Models/SingleRestModel.dart	(date 1652067587063)
@@ -96,6 +96,8 @@
     this.distance,
     this.openStatus,
     this.merchantBranchPaymnetList,
+    this.merchantBranchCoverImage,
+    this.deliveryAreaDeliveryTime
   });
 
   String? merchantBranchNameArabi;
@@ -120,6 +122,8 @@
   String? distance;
   String? openStatus;
   List<String>? merchantBranchPaymnetList;
+  String? merchantBranchCoverImage;
+  String? deliveryAreaDeliveryTime;
 
   factory BranchDetails.fromJson(Map<String, dynamic> json) => BranchDetails(
     merchantBranchNameArabi: json["merchant_branch_name_arabi"],
@@ -137,12 +141,14 @@
     merchantBranchBusy: json["merchant_branch_busy"],
     merchantBranchPaymnetMode: json["merchant_branch_paymnet_mode"],
     merchantBranchImage: json["merchant_branch_image"],
+    merchantBranchCoverImage: json["merchant_branch_cover_image"],
     merchantPackCharge: json["merchant_pack_charge"],
     merchantPackChargeType: json["merchant_pack_charge_type"],
     countryCurrency: json["country_currency"],
     restaurantArea: json["restaurant_area"],
     distance: json["distance"],
     openStatus: json["open_status"],
+    deliveryAreaDeliveryTime: json["delivery_area_delivery_time"],
     merchantBranchPaymnetList: List<String>.from(json["merchant_branch_paymnet_list"].map((x) => x)),
   );
 
@@ -162,12 +168,14 @@
     "merchant_branch_busy": merchantBranchBusy,
     "merchant_branch_paymnet_mode": merchantBranchPaymnetMode,
     "merchant_branch_image": merchantBranchImage,
+    "merchant_branch_cover_image": merchantBranchCoverImage,
     "merchant_pack_charge": merchantPackCharge,
     "merchant_pack_charge_type": merchantPackChargeType,
     "country_currency": countryCurrency,
     "restaurant_area": restaurantArea,
     "distance": distance,
     "open_status": openStatus,
+    "delivery_area_delivery_time": deliveryAreaDeliveryTime,
     "merchant_branch_paymnet_list": List<dynamic>.from(merchantBranchPaymnetList!.map((x) => x)),
   };
 }
@@ -181,13 +189,13 @@
 
   });
 
-  String? categoryId;
+  int? categoryId;
   String? categoryName;
   String? categoryNameArb;
   bool? isActive;
 
   factory Category.fromJson(Map<String, dynamic> json) => Category(
-    categoryId: json["category_id"],
+    categoryId: int.parse(json["category_id"].toString()),
     categoryName: json["category_name"],
     categoryNameArb: json["category_name_arb"],
     isActive: true,
@@ -261,10 +269,11 @@
     this.availableDay,
     this.isPriceon,
     this.isAddon,this.enteredQty,
-    this.addonsList,this.addonIds
+    this.addonsList,this.addonIds,this.tempId
   });
 
   String? itemId;
+  String? tempId;
   String? itemDeleteStatus;
   String? itemVisibility;
   String? itemVisibilityApproval;
@@ -292,7 +301,7 @@
   String? itemEndDate;
   String? itemFromDate;
   String? itemToDate;
-  DateTime? itemAddedDate;
+  String? itemAddedDate;
   String? itemAddedBy;
   String? itemAdddedType;
   String? itemPaymentMode;
@@ -304,14 +313,14 @@
   dynamic hideLimitDate;
   dynamic isEggIncluded;
   dynamic itemPackageCharge;
-  String? categoryId;
+  int? categoryId;
   String? categoryDeleteStatus;
   String? categoryBranchId;
   String? categoryVisibility;
   String? categoryDisplayOrder;
   String? categoryName;
   String? categoryNameArb;
-  DateTime? categoryAddedDate;
+  String? categoryAddedDate;
   String? categoryModifiedon;
   String? categoryAddedBy;
   String? categoryEditedBy;
@@ -330,6 +339,7 @@
   factory Item.fromJson(Map<String, dynamic> json) => Item(
     // addonsList: List<Addons>.from(json["addonsList"].map((x) => Addons.fromJson(x))),
     itemId: json["item_id"],
+    tempId: json.containsKey("tempId")?json["tempId"]:null,
     itemDeleteStatus: json["item_delete_status"],
     itemVisibility: json["item_visibility"],
     itemVisibilityApproval: json["item_visibility_approval"],
@@ -357,7 +367,7 @@
     itemEndDate: json["item_end_date"],
     itemFromDate: json["item_from_date"],
     itemToDate: json["item_to_date"],
-    itemAddedDate: DateTime.parse(json["item_added_date"]),
+    itemAddedDate: json["item_added_date"],
     itemAddedBy: json["item_added_by"],
     itemAdddedType: json["item_addded_type"],
     itemPaymentMode: json["item_payment_mode"],
@@ -369,14 +379,14 @@
     hideLimitDate: json["hide_limit_date"],
     isEggIncluded: json["is_egg_included"],
     itemPackageCharge: json["item_package_charge"],
-    categoryId: json["category_id"],
+    categoryId: int.parse(json["category_id"].toString()),
     categoryDeleteStatus: json["category_delete_status"],
     categoryBranchId: json["category_branch_id"],
     categoryVisibility: json["category_visibility"],
     categoryDisplayOrder: json["category_display_order"],
     categoryName: json["category_name"],
     categoryNameArb: json["category_name_arb"],
-    categoryAddedDate: DateTime.parse(json["category_added_date"]),
+    categoryAddedDate: json["category_added_date"],
     categoryModifiedon: json["category_modifiedon"],
     categoryAddedBy: json["category_added_by"],
     categoryEditedBy: json["category_edited_by"],
@@ -390,21 +400,77 @@
     addonIds: "",
 
   );
+
   static String ToJson(Item model) {
     Map<String, dynamic> map() =>
         {
-
           "item_id": model.itemId,
-          "special_request": "",
-          "price_on_id": 0,
-          "qty": model.enteredQty,
-          "addons_id": model.addonIds,
+          "tempId": model.tempId,
+          "item_delete_status": model.itemDeleteStatus,
+          "item_visibility": model.itemVisibility,
+          "item_visibility_approval": model.itemVisibilityApproval,
+          "item_approve_status": model.itemApproveStatus,
+          "item_merchant": model.itemMerchant,
+          "item_merchant_branch": model.itemMerchantBranch,
+          "item_type": model.itemType,
+          "item_category":model. itemCategory,
+          "item_name":model. itemName,
+          "item_name_arabic": model.itemNameArabic,
+          "item_price_type": model.itemPriceType,
+          "item_price":model. itemPrice,
+          "item_offer_price": model.itemOfferPrice,
+          "item_description": model.itemDescription,
+          "item_description_arabic": model.itemDescriptionArabic,
+          "item_flavour": model.itemFlavour,
+          "item_veg_nonveg": model.itemVegNonveg,
+          "item_image": model.itemImage,
+          "item_cuisine":model. itemCuisine,
+          "item_available_days": model.itemAvailableDays,
+          "item_available_time_from":model. itemAvailableTimeFrom,
+          "item_available_time_to":model. itemAvailableTimeTo,
+          "item_cart_slider": model.itemCartSlider,
+          "item_start_date":model. itemStartDate,
+          "item_end_date":model. itemEndDate,
+          "item_from_date": model.itemFromDate,
+          "item_to_date": model.itemToDate,
+          "item_added_date": model.itemAddedDate,
+          "item_added_by": model.itemAddedBy,
+          "item_addded_type": model.itemAdddedType,
+          "item_payment_mode": model.itemPaymentMode,
+          "food_item_home_visible": model.foodItemHomeVisible,
+          "item_offer_status": model.itemOfferStatus,
+          "item_offer_percentage": model.itemOfferPercentage,
+          "item_offer_amt": model.itemOfferAmt,
+          "hide_limit_time": model.hideLimitTime,
+          "hide_limit_date": model.hideLimitDate,
+          "is_egg_included": model.isEggIncluded,
+          "item_package_charge": model.itemPackageCharge,
+          "category_id": model.categoryId,
+          "category_delete_status": model.categoryDeleteStatus,
+          "category_branch_id": model.categoryBranchId,
+          "category_visibility": model.categoryVisibility,
+          "category_display_order": model.categoryDisplayOrder,
+          "category_name": model.categoryName,
+          "category_name_arb": model.categoryNameArb,
+          "category_added_date": model.categoryAddedDate,
+          "category_modifiedon": model.categoryModifiedon,
+          "category_added_by": model.categoryAddedBy,
+          "category_edited_by": model.categoryEditedBy,
+          "category_added_user_type": model.categoryAddedUserType,
+          "category_editted_user_type": model.categoryEdittedUserType,
+          // "addons_sub_title_id": addonsSubTitleId,
+          "rest_status": model.restStatus,
+          "available_time": model.availableTime,
+          "available_day": model.availableDay,
+          "is_priceon": model.isPriceon,
+          "is_addon": model.isAddon,
         };
     String result = json.encode(map());
     return result;
   }
 
-}
+
+  }
 
 class Addons {
   Addons({
@@ -435,7 +501,7 @@
   String? itemAddonsSubtitleTblid;
   String? itemAddonsSubtitleSubtitleId;
   String? addonsName;
-  String? addonsType;
+  int? addonsType;
   String? addonsArabi;
   String? addonsSubTitleName;
   String? addonsSubTitleArabi;
@@ -453,7 +519,7 @@
     itemAddonsSubtitleTblid: json["item_addons_subtitle_tblid"] == null ? null : json["item_addons_subtitle_tblid"],
     itemAddonsSubtitleSubtitleId: json["item_addons_subtitle_subtitle_id"] == null ? null : json["item_addons_subtitle_subtitle_id"],
     addonsName: json["addons_name"] == null ? null : json["addons_name"],
-    addonsType: json["addons_type"] == null ? null : json["addons_type"],
+    addonsType: json["addons_type"] == null ? 1 : int.parse(json["addons_type"].toString()),
     addonsArabi: json["addons_arabi"] == null ? null : json["addons_arabi"],
     addonsSubTitleName: json["addons_sub_title_name"] == null ? null : json["addons_sub_title_name"],
     addonsSubTitleArabi: json["addons_sub_title_arabi"] == null ? null : json["addons_sub_title_arabi"],
Index: lib/screens/basket/Section/headerCard.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/basket/Section/headerCard.dart b/lib/screens/basket/Section/headerCard.dart
--- a/lib/screens/basket/Section/headerCard.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/basket/Section/headerCard.dart	(date 1651993900728)
@@ -35,13 +35,13 @@
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
-            Padding(
-              padding: EdgeInsets.all(10),
-              child: Text("WELCOME50 eligible items",
-                  style: TextStyle(
-                      color: Colors.deepOrangeAccent,
-                      fontWeight: FontWeight.w500)),
-            ),
+            // Padding(
+            //   padding: EdgeInsets.all(10),
+            //   child: Text("WELCOME50 eligible items",
+            //       style: TextStyle(
+            //           color: Colors.deepOrangeAccent,
+            //           fontWeight: FontWeight.w500)),
+            // ),
             ListView.separated(
                 separatorBuilder: (context, index) {
                   return Divider();
@@ -54,6 +54,23 @@
                     children: [
                       Row(
                         children: [
+                        Container(
+                          padding:EdgeInsets.only(left: 15),
+                          child:   provider.cartModelList[index].itemVegNonveg ==
+                              "1"
+                              ? Image.asset(
+                            Helper.getAssetName(
+                                "veg.png",
+                                "virtual"),
+                            height: 15,
+                          )
+                              : Image.asset(
+                            Helper.getAssetName(
+                                "non-veg.png",
+                                "virtual"),
+                            height: 15,
+                          ),
+                        ),
                           Expanded(
                             child: Padding(
                               padding: EdgeInsets.all(15),
@@ -179,7 +196,7 @@
                               isScrollControlled: true,
                               context: context,
                               builder: (context) {
-                                return CartAddons(provider.cartModelList[index],index);
+                                return CartAddons(provider.cartModelList[index],false);
                               });
 
                           // showModalBottomSheet(
Index: lib/screens/basket/Section/itemBasketHome.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/basket/Section/itemBasketHome.dart b/lib/screens/basket/Section/itemBasketHome.dart
--- a/lib/screens/basket/Section/itemBasketHome.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/basket/Section/itemBasketHome.dart	(date 1651937673449)
@@ -410,6 +410,7 @@
                         } else{
                           selectedTip = index;
                           tipValue = int.parse(tips[index]);
+                          Provider.of<ApplicationProvider>(context, listen: false).setTipValue(tipValue);
                           setState(() {
 
                           });
@@ -448,13 +449,14 @@
       // if(null!=provider.selectedAddressModel.addressId && provider.selectedAddressModel.addressId!.isNotEmpty){
       //   getDeliveryCharge();
       // }
-      for (Item item in provider.cartModelList) {
-        totalAmt = totalAmt + item.totalPrice!;
-        provider.setItemTotal(totalAmt);
-      }
-      taxData = provider.calculateTax(taxPercentage, totalAmt, false);
-      toPayAmt = taxData['totalAmtWithTax']+tipValue+provider.deliveryFee;
-      provider.setTotalCartPrice(toPayAmt);
+      // provider.calculateTotal();
+      // for (Item item in provider.cartModelList) {
+      //   totalAmt = totalAmt + item.totalPrice!;
+      //   provider.setItemTotal(totalAmt);
+      // }
+      // taxData = provider.calculateTax(taxPercentage, totalAmt, false);
+      // toPayAmt = taxData['totalAmtWithTax']+tipValue+provider.deliveryFee;
+      // provider.setTotalCartPrice(toPayAmt);
       return Container(
         height: 270,
         width: Helper.getScreenWidth(context) * 1,
@@ -474,7 +476,7 @@
                 ),
                 Padding(
                   padding: EdgeInsets.only(right: 15, top: 20),
-                  child: Text('₹${totalAmt.toStringAsFixed(2)}'),
+                  child: Text('₹${provider.totalWithoutTax}'),
                 )
               ],
             ),
@@ -558,7 +560,7 @@
                     margin: EdgeInsets.only(left: 20),
                     height: 50,
                     message:
-                        'Restaurant GST : ₹${taxData['totalTaxAmt'].toStringAsFixed(2)}',
+                        'Restaurant GST : ₹${provider.taxData['totalTaxAmt']}',
                     textStyle: TextStyle(
                         color: Colors.black, fontWeight: FontWeight.w500),
                     triggerMode: TooltipTriggerMode.tap,
@@ -572,7 +574,7 @@
                 ),
                 Padding(
                   padding: EdgeInsets.only(right: 15, top: 15),
-                  child: Text('₹${taxData['totalTaxAmt'].toStringAsFixed(2)}'),
+                  child: Text('₹${provider.taxData['totalTaxAmt']}'),
                 ),
               ],
             ),
@@ -592,7 +594,7 @@
                 ),
                 Padding(
                   padding: EdgeInsets.only(right: 15, top: 20),
-                  child: Text('₹${provider.totalCartPrice}',
+                  child: Text('₹${provider.toPayAmt}',
                       style: TextStyle(
                           fontWeight: FontWeight.w600,
                           color: Colors.black.withOpacity(.6))),
@@ -628,7 +630,7 @@
                     mainAxisAlignment: MainAxisAlignment.spaceBetween,
                     children: [
                       Expanded(
-                        child: null !=
+                        child: isLoggedIn && null !=
                                     provider.selectedAddressModel.addressId &&
                                 provider
                                     .selectedAddressModel.addressId!.isNotEmpty
@@ -701,7 +703,7 @@
                                       ]),
                                 ),
                               )
-                            : InkWell(
+                            :!isLoggedIn? Container(): InkWell(
                                 onTap: () {
                                   showModalBottomSheet(
                                       shape: RoundedRectangleBorder(
@@ -772,7 +774,7 @@
             ),
             ListTile(
               title: Text(
-                "₹${provider.totalCartPrice}",
+                "₹${provider.toPayAmt}",
                 style: TextStyle(
                   fontSize: 16,
                   fontWeight: FontWeight.w600,
@@ -917,6 +919,7 @@
         await http.post(Uri.parse(ApiData.MERCHANT_BRANCH_TAX), body: map);
     var json = convert.jsonDecode(response.body);
     taxPercentage = double.parse(json['tax_details']);
+    Provider.of<ApplicationProvider>(context, listen: false).setTaxPercentage(taxPercentage);
     setState(() {});
   }
 }
Index: pubspec.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.yaml b/pubspec.yaml
--- a/pubspec.yaml	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/pubspec.yaml	(date 1651938917192)
@@ -50,6 +50,9 @@
   location: ^4.3.0
   flutter_polyline_points: ^1.0.0
   timelines: ^0.1.0
+  vertical_scrollable_tabview: ^0.0.7
+  intl:
+
 
 
 
Index: lib/screens/orderTracking/orderTracking.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/orderTracking/orderTracking.dart b/lib/screens/orderTracking/orderTracking.dart
--- a/lib/screens/orderTracking/orderTracking.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/orderTracking/orderTracking.dart	(date 1651490624497)
@@ -38,7 +38,7 @@
   List<LatLng> polylineCoordinates = [];
   PolylinePoints polylinePoints = PolylinePoints();
   String googleApiKey = "AIzaSyDkqhaT1weCdUwCPuUT9OqKsGbCQPGsMM8";
-  int _processIndex = 1;
+  int _processIndex = 0;
   BitmapDescriptor? driverIcon, restaurantsIcon, destinationIcon;
   StreamSubscription<DocumentSnapshot>? _eventsSubscription;
 
Index: lib/Menu/Microfiles/PaymentSection/payment_home.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/Menu/Microfiles/PaymentSection/payment_home.dart b/lib/Menu/Microfiles/PaymentSection/payment_home.dart
--- a/lib/Menu/Microfiles/PaymentSection/payment_home.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/Menu/Microfiles/PaymentSection/payment_home.dart	(date 1651936060526)
@@ -58,7 +58,7 @@
                       style: TextStyle(color: Colors.grey, fontSize: 12),
                     ),
                     Text(
-                      "Total:₹${provider.totalCartPrice}",
+                      "Total:₹${provider.totalWithoutTax}",
                       style: TextStyle(color: Colors.grey, fontSize: 12),
                     ),
                   ],
Index: lib/screens/basket/Section/cartAddons.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/basket/Section/cartAddons.dart b/lib/screens/basket/Section/cartAddons.dart
--- a/lib/screens/basket/Section/cartAddons.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/basket/Section/cartAddons.dart	(date 1652070931076)
@@ -1,3 +1,5 @@
+import 'dart:convert';
+
 import 'package:flutter/material.dart';
 import 'package:foodzer_customer_app/Api/ApiData.dart';
 import 'package:foodzer_customer_app/Menu/Microfiles/FiltterSection/applybutton.dart';
@@ -11,8 +13,9 @@
 import 'package:provider/provider.dart';
 class CartAddons extends StatefulWidget {
   Item itemModel;
-  int itemIndex=-1;
-  CartAddons(this.itemModel,this.itemIndex) ;
+  // int itemIndex=-1;
+  bool isNewItem=false;
+  CartAddons(this.itemModel,this.isNewItem) ;
 
   @override
   _CartAddonsState createState() => _CartAddonsState();
@@ -22,8 +25,9 @@
 
   List<Addons> addonModelList = [];
   bool isLoading = false;
-  dynamic itemPrice;
-  dynamic totalPrice;
+  double totalPrice=0;
+  bool isMandatory = false;
+  int lastAddonIndex=-1;
 
   @override
   void initState() {
@@ -93,56 +97,335 @@
           ],),
         SizedBox(height: 10,),
         MySeparator(),
-        Flexible(
-          child:
-          ListView.separated(
-              separatorBuilder: (context, index) {
-                return Divider();
-              },
-              physics: ScrollPhysics(),
-              shrinkWrap: true,
-              itemCount: addonModelList.length,
-              itemBuilder: (context, index) {
-                return Padding(
-                  padding: const EdgeInsets.only(left: 15.0),
-                  child: Row(
-                    mainAxisAlignment:
-                    MainAxisAlignment.spaceBetween,
-                    children: [
-                      Expanded(
-                        child: Text(
-                            addonModelList[index].addonsSubTitleName.toString()),
-                      ),
-                      Row(
-                        children: [
-                          Text(
-                              '(+ INR ${addonModelList[index].addonsSubTitlePrice})'),
-                          Checkbox(
-                            checkColor: Colors.white,
-                            shape: RoundedRectangleBorder(
-                              borderRadius:
-                              BorderRadius.circular(3),
-                            ),
-                            activeColor:
-                            Colors.deepOrangeAccent,
-                            value: addonModelList[index].isSelected,
-                            onChanged: (checked) {
-                              setState(
-                                    () {
-                                  addonModelList[index].isSelected = checked;
-
-                                },
-                              );
-                            },
-                          ),
-                        ],
-                      )
-                    ],
-                  ),
-                );
-              })
-        ),
-        MySeparator(),
+        null !=
+            addonModelList
+                .where((element) =>
+            null != element.addonsType &&
+                element.addonsType == 2)
+                .toList() &&
+            addonModelList
+                .where((element) =>
+            null != element.addonsType &&
+                element.addonsType == 2)
+                .toList()
+                .length >
+                0
+            ? Flexible(
+              child: Padding(
+          padding: const EdgeInsets.all(15.0),
+          child: Column(
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                Text(
+                    null !=
+                        addonModelList
+                            .where((element) =>
+                        null !=
+                            element
+                                .addonsType &&
+                            element.addonsType ==
+                                2)
+                            .toList() &&
+                        addonModelList
+                            .where((element) =>
+                        null !=
+                            element
+                                .addonsType &&
+                            element.addonsType ==
+                                2)
+                            .toList()
+                            .length >
+                            0
+                        ? addonModelList
+                        .where((element) =>
+                    null != element.addonsType &&
+                        element.addonsType == 2)
+                        .toList()
+                        .first
+                        .addonsName!
+                        : "",
+                    style: TextStyle(
+                        fontWeight: FontWeight.w600,
+                        fontSize: 16)),
+                SizedBox(
+                  height: 5,
+                ),
+                null !=
+                    addonModelList
+                        .where((element) =>
+                    null !=
+                        element.addonsType &&
+                        element.addonsType == 2)
+                        .toList() &&
+                    addonModelList
+                        .where((element) =>
+                    null !=
+                        element.addonsType &&
+                        element.addonsType == 2)
+                        .toList()
+                        .length >
+                        0
+                    ? !isMandatory
+                    ? Text('Choose 1',
+                    style: TextStyle(
+                        fontWeight: FontWeight.w600,
+                        color: Colors.grey,
+                        fontSize: 14))
+                    : Row(
+                  children: [
+                    Icon(
+                      Icons.warning_amber_outlined,
+                      color: Colors.red,
+                    ),
+                    SizedBox(
+                      width: 2,
+                    ),
+                    Text("Choose 1",
+                        style: TextStyle(
+                            fontWeight:
+                            FontWeight.w600,
+                            color: Colors.red,
+                            fontSize: 15))
+                  ],
+                )
+                    : Container(
+                  height: 0,
+                ),
+                ListView.builder(
+                    physics: ScrollPhysics(),
+                    shrinkWrap: true,
+                    itemCount: addonModelList.length,
+                    itemBuilder: (context, index) {
+                      return Visibility(
+                        visible: null !=
+                            addonModelList[index].addonsType &&
+                            addonModelList[index].addonsType == 2,
+                        child: Row(
+                          mainAxisAlignment:
+                          MainAxisAlignment.spaceBetween,
+                          children: [
+                            Expanded(
+                              child: Text(addonModelList[index]
+                                  .addonsSubTitleName
+                                  .toString()),
+                            ),
+                            Radio(
+                              activeColor:
+                              Colors.deepOrangeAccent,
+                              value: null !=
+                                  addonModelList[index]
+                                      .isSelected &&
+                                  addonModelList[index]
+                                      .isSelected!
+                                  ? 1
+                                  : 0,
+                              groupValue: 1,
+                              onChanged: (value) {
+                                addonModelList[index].isSelected =
+                                true;
+
+                                if (lastAddonIndex != -1) {
+                                  addonModelList[lastAddonIndex]
+                                      .isSelected = false;
+                                }
+                                lastAddonIndex = index;
+                                isMandatory = false;
+                                setState(() {});
+                              },
+                            )
+                          ],
+                        ),
+                      );
+                    })
+              ],
+          ),
+        ),
+            )
+            : Container(),
+        null != addonModelList && addonModelList.length > 0
+            ? Divider(
+            height: 1,
+            thickness: 6,
+            color: Colors.grey.shade300)
+            : Container(),
+        null != addonModelList && addonModelList.length > 0
+            ? Padding(
+          padding: const EdgeInsets.all(15.0),
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: [
+              Row(
+                children: [
+                  Text(
+                      null !=
+                          addonModelList
+                              .where((element) =>
+                          null !=
+                              element
+                                  .addonsType &&
+                              element.addonsType ==
+                                  1)
+                              .toList() &&
+                          addonModelList
+                              .where((element) =>
+                          null !=
+                              element
+                                  .addonsType &&
+                              element.addonsType ==
+                                  1)
+                              .toList()
+                              .length >
+                              0
+                          ? addonModelList
+                          .where((element) =>
+                      null !=
+                          element.addonsType &&
+                          element.addonsType == 1)
+                          .toList()
+                          .first
+                          .addonsName!
+                          : "",
+                      style: TextStyle(
+                          fontWeight: FontWeight.w600,
+                          fontSize: 16)),
+                ],
+              ),
+              SizedBox(
+                height: 10,
+              ),
+              Text('Choose items from the list',
+                  style: TextStyle(
+                      fontWeight: FontWeight.w600,
+                      color: Colors.grey,
+                      fontSize: 14)),
+              SizedBox(
+                height: 20,
+              ),
+              ListView.separated(
+                  separatorBuilder: (context, index) {
+                    return Divider();
+                  },
+                  physics: ScrollPhysics(),
+                  shrinkWrap: true,
+                  itemCount: addonModelList.length,
+                  itemBuilder: (context, index) {
+                    return Visibility(
+                      visible: null !=
+                          addonModelList[index].addonsType &&
+                          addonModelList[index].addonsType == 1,
+                      child: Row(
+                        mainAxisAlignment:
+                        MainAxisAlignment.spaceBetween,
+                        children: [
+                          Expanded(
+                            child: Text(addonModelList[index]
+                                .addonsSubTitleName
+                                .toString()),
+                          ),
+                          Row(
+                            children: [
+                              Text(
+                                  '(+ INR ${addonModelList[index].addonsSubTitlePrice})'),
+                              Checkbox(
+                                checkColor: Colors.white,
+                                shape:
+                                RoundedRectangleBorder(
+                                  borderRadius:
+                                  BorderRadius.circular(
+                                      3),
+                                ),
+                                activeColor:
+                                Colors.deepOrangeAccent,
+                                value: addonModelList[index]
+                                    .isSelected,
+                                onChanged: (checked) {
+                                  setState(
+                                        () {
+                                      addonModelList[index]
+                                          .isSelected =
+                                          checked;
+                                      if (addonModelList[index]
+                                          .isSelected ==
+                                          true) {
+                                        totalPrice = double
+                                            .parse(totalPrice
+                                            .toString()) +
+                                            double.parse(addonModelList[
+                                            index]
+                                                .addonsSubTitlePrice
+                                                .toString());
+                                      } else {
+                                        totalPrice = double
+                                            .parse(totalPrice
+                                            .toString()) -
+                                            double.parse(addonModelList[
+                                            index]
+                                                .addonsSubTitlePrice
+                                                .toString());
+                                      }
+                                    },
+                                  );
+                                },
+                              ),
+                            ],
+                          )
+                        ],
+                      ),
+                    );
+                  })
+            ],
+          ),
+        )
+        // Flexible(
+        //   child:
+        //   ListView.separated(
+        //       separatorBuilder: (context, index) {
+        //         return Divider();
+        //       },
+        //       physics: ScrollPhysics(),
+        //       shrinkWrap: true,
+        //       itemCount: addonModelList.length,
+        //       itemBuilder: (context, index) {
+        //         return Padding(
+        //           padding: const EdgeInsets.only(left: 15.0),
+        //           child: Row(
+        //             mainAxisAlignment:
+        //             MainAxisAlignment.spaceBetween,
+        //             children: [
+        //               Expanded(
+        //                 child: Text(
+        //                     addonModelList[index].addonsSubTitleName.toString()),
+        //               ),
+        //               Row(
+        //                 children: [
+        //                   Text(
+        //                       '(+ INR ${addonModelList[index].addonsSubTitlePrice})'),
+        //                   Checkbox(
+        //                     checkColor: Colors.white,
+        //                     shape: RoundedRectangleBorder(
+        //                       borderRadius:
+        //                       BorderRadius.circular(3),
+        //                     ),
+        //                     activeColor:
+        //                     Colors.deepOrangeAccent,
+        //                     value: addonModelList[index].isSelected,
+        //                     onChanged: (checked) {
+        //                       setState(
+        //                             () {
+        //                           addonModelList[index].isSelected = checked;
+        //
+        //                         },
+        //                       );
+        //                     },
+        //                   ),
+        //                 ],
+        //               )
+        //             ],
+        //           ),
+        //         );
+        //       })
+        // ),
+        :MySeparator(),
         saveBtn(),
       ],
     );
@@ -185,10 +468,25 @@
             height: 50,
             child: ElevatedButton(
               onPressed: () {
+
+                widget.itemModel.enteredQty=null!=widget.itemModel.enteredQty?
+                widget.itemModel.enteredQty!+1:1;
                 widget.itemModel.addonsList=addonModelList.where((element) => element.isSelected == true).toList();
+                Item item=new Item();
+                // item=widget.itemModel;
+                String kson=Item.ToJson(widget.itemModel);
+
+                var jsonData =json.decode(kson);
+                item=Item.fromJson(jsonData);
+                if(widget.isNewItem){
+                 item.tempId=null;
+                 item.enteredQty=1;
+                }
                 Provider.of<ApplicationProvider>(context,
-                    listen: false).updateProduct(widget.itemModel,true,widget.itemModel.enteredQty!);
+                    listen: false).updateProduct(item,true,widget.itemModel.enteredQty!);
+                Navigator.of(context).pop( widget.itemModel.enteredQty);
                 Navigator.of(context).pop();
+
               },
               child: Text(
                 'Update Item to Cart',
@@ -225,16 +523,28 @@
           .map((spacecraft) => new Addons.fromJson(spacecraft))
           .toList();
 
-      if(null!=widget.itemModel.addonsList && widget.itemModel.addonsList!.length>0){
-        for(Addons  addonModel in widget.itemModel.addonsList!){
-          if(addonModel.isSelected!){
-            addonModelList.where((element) => element.itemAddonsSubtitleTblid
-                == addonModel.itemAddonsSubtitleTblid).first.isSelected = true;
-            // totalPrice = double.parse(
-            //     totalPrice.toString()) +  addonModel.addonsSubTitlePrice!;
-            setState(() {
-
-            });
+      if (null != widget.itemModel.addonsList &&
+          widget.itemModel.addonsList!.length > 0) {
+        for (Addons addonModel in widget.itemModel.addonsList!) {
+          if (addonModel.isSelected!) {
+            if (null != addonModel.addonsType && addonModel.addonsType == 2) {
+              lastAddonIndex = addonModelList.indexWhere((element) =>
+              element.itemAddonsSubtitleTblid ==
+                  addonModel.itemAddonsSubtitleTblid);
+              if (lastAddonIndex != -1) {
+                addonModelList[lastAddonIndex].isSelected = true;
+              }
+            } else {
+              addonModelList
+                  .where((element) =>
+              element.itemAddonsSubtitleTblid ==
+                  addonModel.itemAddonsSubtitleTblid)
+                  .first
+                  .isSelected = true;
+            }
+            totalPrice = double.parse(totalPrice.toString()) +
+                addonModel.addonsSubTitlePrice!;
+            setState(() {});
           }
         }
       }
Index: lib/screens/innerdetails/section/restaurantProductsList.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/innerdetails/section/restaurantProductsList.dart b/lib/screens/innerdetails/section/restaurantProductsList.dart
--- a/lib/screens/innerdetails/section/restaurantProductsList.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/screens/innerdetails/section/restaurantProductsList.dart	(date 1651900930841)
@@ -1,4 +1,5 @@
 import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
 import 'package:foodzer_customer_app/Api/ApiData.dart';
 import 'package:foodzer_customer_app/Models/SingleRestModel.dart';
 import 'package:foodzer_customer_app/blocs/application_bloc.dart';
@@ -9,9 +10,13 @@
 import 'package:http/http.dart' as http;
 import 'dart:convert' as convert;
 
+import 'package:vertical_scrollable_tabview/vertical_scrollable_tabview.dart';
+
 class RestaurantProductsList extends StatefulWidget {
   bool isSwitched;
-   RestaurantProductsList(this.isSwitched);
+  TabController? tabController;
+
+  RestaurantProductsList(this.isSwitched, this.tabController);
 
   @override
   State<RestaurantProductsList> createState() => _RestaurantProductsListState();
@@ -19,11 +24,30 @@
 
 class _RestaurantProductsListState extends State<RestaurantProductsList> {
   // List<Addons> addonModelList = [];
+  // ScrollController scrollController=new ScrollController();
   @override
   void initState() {
+    // scrollController.addListener(() {
+    //   print(scrollController.offset.toString()+"offfset"); // <-- This is it.
+    // });// <--
     super.initState();
   }
 
+  _scrollListener() {
+    // if (_controller.offset >= _controller.position.maxScrollExtent &&
+    //     !_controller.position.outOfRange) {
+    //   setState(() {
+    //     message = "reach the bottom";
+    //   });
+    // }
+    // if (_controller.offset <= _controller.position.minScrollExtent &&
+    //     !_controller.position.outOfRange) {
+    //   setState(() {
+    //     message = "reach the top";
+    //   });
+    // }
+  }
+
   @override
   void dispose() {
     super.dispose();
@@ -33,128 +57,296 @@
   Widget build(BuildContext context) {
     return Consumer<ApplicationProvider>(builder: (context, provider, child) {
       return null != provider.filteredLoadedProductModelList
-          ? ListView.separated(
-              separatorBuilder: (context, index) {
-                return Divider();
-              },
-              physics: ScrollPhysics(),
-              shrinkWrap: true,
-              itemCount: provider.filteredLoadedProductModelList.length,
-              itemBuilder: (BuildContext context, int index) {
-                Item itemModel = provider.filteredLoadedProductModelList[index];
-                return InkWell(
-                  onTap: () {
-                    singleItemDetails(context, itemModel);
-                    // provider.getItemId(itemModel.itemId!);
-                    // if (itemModel.isAddon == 1) {
-                    //   getAddons();
-                    // }
-                  },
-                  child: Container(
-                      decoration: BoxDecoration(
-                        border: Border(
-                          right: null != itemModel.enteredQty
-                              ? BorderSide(
-                                  color: Colors.deepOrangeAccent, width: 5)
-                              : BorderSide.none,
-                        ),
-                        // borderRadius: BorderRadius.only( topRight: Radius.circular(20),bottomRight: Radius.circular(20))
-                      ),
-                      margin: EdgeInsets.only(top: 15, bottom: 10),
-                      child: Row(
-                        mainAxisAlignment: MainAxisAlignment.start,
-                        crossAxisAlignment: CrossAxisAlignment.start,
-                        children: [
-                          Expanded(
-                            child: Column(
-                              crossAxisAlignment: CrossAxisAlignment.start,
-                              children: [
-                                Row(
-                                  crossAxisAlignment: CrossAxisAlignment.start,
-                                  children: [
-                                    itemModel.itemVegNonveg == "1"
-                                        ? Image.asset(
-                                            Helper.getAssetName(
-                                                "veg.png", "virtual"),
-                                            height: 15,
-                                          )
-                                        : Image.asset(
-                                            Helper.getAssetName(
-                                                "non-veg.png", "virtual"),
-                                            height: 15,
-                                          ),
-                                    SizedBox(
-                                      width: 5,
-                                    ),
-                                    Text(null != itemModel.enteredQty
-                                        ? '${itemModel.enteredQty.toString()}x'
-                                        : "",
-                                      style:TextStyle(
-                                        fontSize: 12,
-                                        fontWeight: FontWeight.w500,
-                                        color: Colors.deepOrange
-                                      ),),
-                                    SizedBox(
-                                      width: 3,
-                                    ),
-                                    Expanded(
-                                      child: Text(itemModel.itemName!,
-                                          style: TextStyle(
-                                              fontWeight: FontWeight.w600,
-                                              height: 1.3)),
-                                    ),
-                                  ],
-                                ),
-                                SizedBox(
-                                  height: 10,
-                                ),
-                                Text(itemModel.itemDescription!,
-                                    style: TextStyle(
-                                        fontSize: 12,
-                                        color: Colors.grey.shade700)),
-                                SizedBox(
-                                  height: 20,
-                                ),
-                                Text('INR ${itemModel.itemPrice}',
-                                    style: TextStyle(
-                                        fontWeight: FontWeight.w500,
-                                        fontSize: 16)),
-                              ],
-                            ),
-                            flex: 9,
-                          ),
-                          Expanded(
-                            child: Container(
-                              child: Image.network(
-                                // 'https://i5.peapod.com/c/NY/NYO1E.png',
-                                itemModel.itemImage!,
-                                fit: BoxFit.fill,
-                                loadingBuilder: (BuildContext context,
-                                    Widget child,
-                                    ImageChunkEvent? loadingProgress) {
-                                  if (loadingProgress == null) return child;
-                                  return Center(
-                                    child: CircularProgressIndicator(
-                                      color: Colors.deepOrangeAccent,
-                                      value:
-                                          loadingProgress.expectedTotalBytes !=
-                                                  null
-                                              ? loadingProgress
-                                                      .cumulativeBytesLoaded /
-                                                  loadingProgress
-                                                      .expectedTotalBytes!
-                                              : null,
-                                    ),
-                                  );
-                                },
-                              ),
-                            ),
-                            flex: 4,
-                          )
-                        ],
-                      )),
-                );
-              })
+          ? Container(
+        color: Colors.white,
+              height: MediaQuery.of(context).size.height,
+              child: VerticalScrollableTabView(
+                  tabController: widget.tabController!,
+                  listItemData: provider.categoryList,
+                  verticalScrollPosition: VerticalScrollPosition.begin,
+                  slivers: [
+                    // SliverLayoutBuilder(
+                    //   builder: (context, constraints) {
+                    //     return SliverAppBar(
+                    //       shadowColor: Colors.transparent,
+                    //       backgroundColor: Colors.white,
+                    //       systemOverlayStyle: SystemUiOverlayStyle.dark,
+                    //       iconTheme: const IconThemeData(
+                    //         color: Colors.black,
+                    //       ),
+                    //     );
+                    //   },
+                    // )
+                  ],
+                  eachItemChild: (object, index) {
+
+                    List<Item> filteredList = [];
+
+                    // provider
+                    //     .currentSelectedCategory(
+                    //     provider
+                    //         .categoryList[
+                    //     index]
+                    //         .categoryId!);
+                    // if (provider
+                    //     .selectedCategoryId ==
+                    //     provider.categoryList[index].categoryId) {
+                    if (provider.categoryList[index].categoryId == 0) {
+                      filteredList = provider.selectedRestModel.items!;
+                      // filteredList.sort(
+                      //     (a, b) => a.categoryName!.compareTo(b.categoryName!));
+                    } else {
+                      filteredList = provider.selectedRestModel.items!
+                          .where((product) => (product.categoryId ==
+                              provider.categoryList[index].categoryId))
+                          .toList();
+                      // filteredList.sort(
+                      //     (a, b) => a.categoryName!.compareTo(b.categoryName!));
+                    }
+                    // Provider.of<ApplicationProvider>(context, listen: false).clearItems();
+                    // provider
+                    //     .setItemLoading(true);
+                    // loadedItemCount = 0;
+                    // _loadData();
+
+                    // provider.addProductData(
+                    //     filteredList,
+                    //     true);
+                    // }
+                    // Provider.of<ApplicationProvider>(context ,listen: false).filterItems(categoryList[index].categoryId!);
+
+                    // provider.setCategoryName(
+                    //     provider
+                    //         .categoryList[index]
+                    //         .categoryName!);
+
+                    return Theme(
+                        data: ThemeData()
+                            .copyWith(dividerColor: Colors.transparent),
+                        child: Column(
+                          mainAxisAlignment: MainAxisAlignment.start,
+                          crossAxisAlignment: CrossAxisAlignment.start,
+
+                            children: [
+                              Padding(
+                                padding: const EdgeInsets.symmetric(horizontal: 8.0),
+                                child: Container(
+                                  width: MediaQuery.of(context).size.width,
+                                  child: Material(
+                                    elevation: 0,
+                                    shape: RoundedRectangleBorder(
+                                        borderRadius: BorderRadius.only(
+                                            topRight: Radius.circular(20),
+                                            topLeft:Radius.circular(20))
+                                    ),
+                                    child: Padding(
+                                      padding: const EdgeInsets.symmetric(vertical: 8.0,
+                                      horizontal: 8),
+                                      child: Text(provider.categoryList[index].categoryName!,
+                                        style: TextStyle(
+                                            fontWeight: FontWeight.w600,
+                                            fontSize: 18),),
+                                    ),
+                                  ),
+                                ),
+                              ),
+                              null==filteredList ||
+                                  filteredList.length==0?
+                                  Center(child: CircularProgressIndicator(),):
+                              Padding(
+                                padding: const EdgeInsets.only(bottom: 20.0),
+                                child: ListView.builder(
+
+                                    // controller: scrollController,
+                                    physics: ScrollPhysics(),
+                                    shrinkWrap: true,
+                                    itemCount: filteredList.length,
+                                    itemBuilder:
+                                        (BuildContext context, int index) {
+                                      Item itemModel = filteredList[index];
+                                      // Future.delayed(Duration.zero, () async {
+                                      //   provider
+                                      //       .currentSelectedCategory(itemModel.categoryId!);                });
+
+                                      return Container(
+                                        height: 120,
+                                        child: Padding(
+                                          padding: const EdgeInsets.symmetric(horizontal: 8.0),
+                                          child: Material(
+                                            elevation: 0,
+                                            shape: RoundedRectangleBorder(
+                                              borderRadius:index==filteredList.length-1?
+                                              BorderRadius.only(
+                                                  bottomLeft: Radius.circular(20),
+                                              bottomRight:Radius.circular(20)):BorderRadius.zero
+                                            ),
+                                            child: Padding(
+                                              padding: const EdgeInsets.all(2.0),
+                                              child: InkWell(
+                                                onTap: () {
+                                                  singleItemDetails(context, itemModel);
+                                                  // provider.getItemId(itemModel.itemId!);
+                                                  // if (itemModel.isAddon == 1) {
+                                                  //   getAddons();
+                                                  // }
+                                                },
+                                                child: Column(
+                                                  mainAxisAlignment: MainAxisAlignment.center,
+                                                  crossAxisAlignment: CrossAxisAlignment.center,
+                                                  children: [
+                                                    Container(
+                                                        decoration: BoxDecoration(
+                                                          border: Border(
+                                                            right:
+                                                                null != itemModel.enteredQty
+                                                                    ? BorderSide(
+                                                                        color: Colors
+                                                                            .deepOrangeAccent,
+                                                                        width: 5)
+                                                                    : BorderSide.none,
+                                                          ),
+                                                          // borderRadius: BorderRadius.only( topRight: Radius.circular(20),bottomRight: Radius.circular(20))
+                                                        ),
+
+                                                        child: Row(
+                                                          mainAxisAlignment:
+                                                              MainAxisAlignment.start,
+                                                          crossAxisAlignment:
+                                                              CrossAxisAlignment.start,
+                                                          children: [
+                                                            Expanded(
+                                                              child: Column(
+                                                                crossAxisAlignment:
+                                                                    CrossAxisAlignment.start,
+                                                                children: [
+                                                                  Row(
+                                                                    crossAxisAlignment:
+                                                                        CrossAxisAlignment
+                                                                            .start,
+                                                                    children: [
+                                                                      itemModel.itemVegNonveg ==
+                                                                              "1"
+                                                                          ? Image.asset(
+                                                                              Helper.getAssetName(
+                                                                                  "veg.png",
+                                                                                  "virtual"),
+                                                                              height: 15,
+                                                                            )
+                                                                          : Image.asset(
+                                                                              Helper.getAssetName(
+                                                                                  "non-veg.png",
+                                                                                  "virtual"),
+                                                                              height: 15,
+                                                                            ),
+                                                                      SizedBox(
+                                                                        width: 5,
+                                                                      ),
+                                                                      Text(
+                                                                        null !=
+                                                                                itemModel
+                                                                                    .enteredQty
+                                                                            ? '${itemModel.enteredQty.toString()}x'
+                                                                            : "",
+                                                                        style: TextStyle(
+                                                                            fontSize: 12,
+                                                                            fontWeight:
+                                                                                FontWeight
+                                                                                    .w500,
+                                                                            color: Colors
+                                                                                .deepOrange),
+                                                                      ),
+                                                                      SizedBox(
+                                                                        width: 3,
+                                                                      ),
+                                                                      Expanded(
+                                                                        child: Text(
+                                                                            itemModel
+                                                                                .itemName!,
+                                                                            style: TextStyle(
+                                                                                fontWeight:
+                                                                                    FontWeight
+                                                                                        .w600,
+                                                                                height: 1.3)),
+                                                                      ),
+                                                                    ],
+                                                                  ),
+                                                                  SizedBox(
+                                                                    height: 5,
+                                                                  ),
+                                                                  Text(
+                                                                      itemModel
+                                                                          .itemDescription!,
+                                                                      style: TextStyle(
+                                                                          fontSize: 12,
+                                                                          color: Colors.grey
+                                                                              .shade700)),
+                                                                  SizedBox(
+                                                                    height: 5,
+                                                                  ),
+                                                                  Text(
+                                                                      'INR ${itemModel.itemPrice}',
+                                                                      style: TextStyle(
+                                                                          fontWeight:
+                                                                              FontWeight.w500,
+                                                                          fontSize: 16)),
+                                                                ],
+                                                              ),
+                                                              flex: 9,
+                                                            ),
+                                                            Expanded(
+                                                              child: Container(
+                                                                child: Image.network(
+                                                                  // 'https://i5.peapod.com/c/NY/NYO1E.png',
+                                                                  itemModel.itemImage!,
+                                                                  height: 80,
+                                                                  width: 80,
+                                                                  fit: BoxFit.fill,
+                                                                  loadingBuilder: (BuildContext
+                                                                          context,
+                                                                      Widget child,
+                                                                      ImageChunkEvent?
+                                                                          loadingProgress) {
+                                                                    if (loadingProgress ==
+                                                                        null) return child;
+                                                                    return Center(
+                                                                      child:
+                                                                          CircularProgressIndicator(
+                                                                        color: Colors
+                                                                            .deepOrangeAccent,
+                                                                        value: loadingProgress
+                                                                                    .expectedTotalBytes !=
+                                                                                null
+                                                                            ? loadingProgress
+                                                                                    .cumulativeBytesLoaded /
+                                                                                loadingProgress
+                                                                                    .expectedTotalBytes!
+                                                                            : null,
+                                                                      ),
+                                                                    );
+                                                                  },
+                                                                ),
+                                                              ),
+                                                              flex: 4,
+                                                            )
+                                                          ],
+                                                        )),
+                                                          // SizedBox(height:5),
+                                                          // Container(height: 1,color: Colors.grey[400],)
+                                                  ],
+                                                ),
+                                              ),
+                                            ),
+                                          ),
+                                        ),
+                                      );
+                                    },
+                                ),
+                              ),
+                            ],
+                        ),
+                    );
+                  }),
+            )
           : Center(
               child: CircularProgressIndicator(
                 color: Colors.deepOrangeAccent,
@@ -177,5 +369,4 @@
           return SingleItemView(itemModel);
         });
   }
-
 }
Index: lib/Menu/Microfiles/PaymentSection/addNewCard.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/Menu/Microfiles/PaymentSection/addNewCard.dart b/lib/Menu/Microfiles/PaymentSection/addNewCard.dart
--- a/lib/Menu/Microfiles/PaymentSection/addNewCard.dart	(revision 38df80b2df95dd72f6ce639e3e22f4ad8606d283)
+++ b/lib/Menu/Microfiles/PaymentSection/addNewCard.dart	(date 1651936060519)
@@ -72,7 +72,7 @@
                   color: Colors.black, fontSize: 15, fontWeight: FontWeight.w600),
             ),
             SizedBox(height: 3,),
-            Text("${provider.cartModelList.length} item . Total: ₹${provider.totalCartPrice}",
+            Text("${provider.cartModelList.length} item . Total: ₹${provider.totalWithoutTax}",
                 style: TextStyle(
                   color: Colors.grey.shade500,
                   fontSize: 12,
@@ -474,7 +474,7 @@
     Map<String, dynamic> inputParams = {
       "orderId": itemOrderId,
       "orderAmount": Provider.of<ApplicationProvider>(context, listen: false)
-          .totalCartPrice
+          .totalWithoutTax
           .toString(),
       "customerName": customerName,
       "orderNote": orderNote,
@@ -628,7 +628,7 @@
     });
     var map = new Map<String, dynamic>();
     map['amount'] = Provider.of<ApplicationProvider>(context, listen: false)
-        .totalCartPrice
+        .totalWithoutTax
         .toString();
     map['order_id'] = itemOrderId;
 
